// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: folio.proto

package folio

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *User) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Email

	// no validation rules for Firstname

	// no validation rules for Lastname

	if v, ok := interface{}(m.GetThumbnail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "Thumbnail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateUserResponseValidationError is the validation error returned by
// CreateUserResponse.Validate if the designated constraints aren't met.
type CreateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserResponseValidationError) ErrorName() string {
	return "CreateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserResponseValidationError{}

// Validate checks the field values on ReadUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ReadUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// ReadUserRequestValidationError is the validation error returned by
// ReadUserRequest.Validate if the designated constraints aren't met.
type ReadUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadUserRequestValidationError) ErrorName() string { return "ReadUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReadUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadUserRequestValidationError{}

// Validate checks the field values on ReadUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ReadUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadUserResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadUserResponseValidationError is the validation error returned by
// ReadUserResponse.Validate if the designated constraints aren't met.
type ReadUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadUserResponseValidationError) ErrorName() string { return "ReadUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e ReadUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadUserResponseValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGerogeriGegege()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserRequestValidationError{
				field:  "GerogeriGegege",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateUserResponseValidationError is the validation error returned by
// UpdateUserResponse.Validate if the designated constraints aren't met.
type UpdateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserResponseValidationError) ErrorName() string {
	return "UpdateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserResponseValidationError{}

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on DeleteUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteUsersRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteUsersRequestValidationError is the validation error returned by
// DeleteUsersRequest.Validate if the designated constraints aren't met.
type DeleteUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUsersRequestValidationError) ErrorName() string {
	return "DeleteUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUsersRequestValidationError{}

// Validate checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteUserResponseValidationError is the validation error returned by
// DeleteUserResponse.Validate if the designated constraints aren't met.
type DeleteUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserResponseValidationError) ErrorName() string {
	return "DeleteUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserResponseValidationError{}

// Validate checks the field values on ListUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserResponseValidationError{
				field:  "PageInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListUserResponseValidationError is the validation error returned by
// ListUserResponse.Validate if the designated constraints aren't met.
type ListUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserResponseValidationError) ErrorName() string { return "ListUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserResponseValidationError{}

// Validate checks the field values on ListUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListUserRequestValidationError is the validation error returned by
// ListUserRequest.Validate if the designated constraints aren't met.
type ListUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserRequestValidationError) ErrorName() string { return "ListUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserRequestValidationError{}

// Validate checks the field values on Share with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Share) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetFriend()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareValidationError{
				field:  "Friend",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetThumbnail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareValidationError{
				field:  "Thumbnail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFolios() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ShareValidationError{
					field:  fmt.Sprintf("Folios[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ShareValidationError is the validation error returned by Share.Validate if
// the designated constraints aren't met.
type ShareValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareValidationError) ErrorName() string { return "ShareValidationError" }

// Error satisfies the builtin error interface
func (e ShareValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShare.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareValidationError{}

// Validate checks the field values on CreateShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateShareRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShareRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateShareRequestValidationError is the validation error returned by
// CreateShareRequest.Validate if the designated constraints aren't met.
type CreateShareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShareRequestValidationError) ErrorName() string {
	return "CreateShareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShareRequestValidationError{}

// Validate checks the field values on CreateShareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateShareResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShareResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateShareResponseValidationError is the validation error returned by
// CreateShareResponse.Validate if the designated constraints aren't met.
type CreateShareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShareResponseValidationError) ErrorName() string {
	return "CreateShareResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShareResponseValidationError{}

// Validate checks the field values on ReadShareRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ReadShareRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// ReadShareRequestValidationError is the validation error returned by
// ReadShareRequest.Validate if the designated constraints aren't met.
type ReadShareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadShareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadShareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadShareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadShareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadShareRequestValidationError) ErrorName() string { return "ReadShareRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReadShareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadShareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadShareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadShareRequestValidationError{}

// Validate checks the field values on ReadShareResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ReadShareResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadShareResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadShareResponseValidationError is the validation error returned by
// ReadShareResponse.Validate if the designated constraints aren't met.
type ReadShareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadShareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadShareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadShareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadShareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadShareResponseValidationError) ErrorName() string {
	return "ReadShareResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadShareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadShareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadShareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadShareResponseValidationError{}

// Validate checks the field values on UpdateShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateShareRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateShareRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGerogeriGegege()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateShareRequestValidationError{
				field:  "GerogeriGegege",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateShareRequestValidationError is the validation error returned by
// UpdateShareRequest.Validate if the designated constraints aren't met.
type UpdateShareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShareRequestValidationError) ErrorName() string {
	return "UpdateShareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShareRequestValidationError{}

// Validate checks the field values on UpdateShareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateShareResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateShareResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateShareResponseValidationError is the validation error returned by
// UpdateShareResponse.Validate if the designated constraints aren't met.
type UpdateShareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShareResponseValidationError) ErrorName() string {
	return "UpdateShareResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShareResponseValidationError{}

// Validate checks the field values on DeleteShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteShareRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteShareRequestValidationError is the validation error returned by
// DeleteShareRequest.Validate if the designated constraints aren't met.
type DeleteShareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShareRequestValidationError) ErrorName() string {
	return "DeleteShareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShareRequestValidationError{}

// Validate checks the field values on DeleteSharesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteSharesRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteSharesRequestValidationError is the validation error returned by
// DeleteSharesRequest.Validate if the designated constraints aren't met.
type DeleteSharesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSharesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSharesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSharesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSharesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSharesRequestValidationError) ErrorName() string {
	return "DeleteSharesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSharesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSharesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSharesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSharesRequestValidationError{}

// Validate checks the field values on DeleteShareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteShareResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteShareResponseValidationError is the validation error returned by
// DeleteShareResponse.Validate if the designated constraints aren't met.
type DeleteShareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShareResponseValidationError) ErrorName() string {
	return "DeleteShareResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShareResponseValidationError{}

// Validate checks the field values on Tag with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Tag) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Kind

	// no validation rules for Label

	// no validation rules for Desc

	for idx, item := range m.GetFolios() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TagValidationError{
					field:  fmt.Sprintf("Folios[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetThumbnail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TagValidationError{
				field:  "Thumbnail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TagValidationError is the validation error returned by Tag.Validate if the
// designated constraints aren't met.
type TagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagValidationError) ErrorName() string { return "TagValidationError" }

// Error satisfies the builtin error interface
func (e TagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagValidationError{}

// Validate checks the field values on CreateTagRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateTagRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTagRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateTagRequestValidationError is the validation error returned by
// CreateTagRequest.Validate if the designated constraints aren't met.
type CreateTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTagRequestValidationError) ErrorName() string { return "CreateTagRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTagRequestValidationError{}

// Validate checks the field values on CreateTagResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateTagResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTagResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateTagResponseValidationError is the validation error returned by
// CreateTagResponse.Validate if the designated constraints aren't met.
type CreateTagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTagResponseValidationError) ErrorName() string {
	return "CreateTagResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTagResponseValidationError{}

// Validate checks the field values on ReadTagRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ReadTagRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// ReadTagRequestValidationError is the validation error returned by
// ReadTagRequest.Validate if the designated constraints aren't met.
type ReadTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadTagRequestValidationError) ErrorName() string { return "ReadTagRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReadTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadTagRequestValidationError{}

// Validate checks the field values on ReadTagResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ReadTagResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadTagResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadTagResponseValidationError is the validation error returned by
// ReadTagResponse.Validate if the designated constraints aren't met.
type ReadTagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadTagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadTagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadTagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadTagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadTagResponseValidationError) ErrorName() string { return "ReadTagResponseValidationError" }

// Error satisfies the builtin error interface
func (e ReadTagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadTagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadTagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadTagResponseValidationError{}

// Validate checks the field values on UpdateTagRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateTagRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTagRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGerogeriGegege()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTagRequestValidationError{
				field:  "GerogeriGegege",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateTagRequestValidationError is the validation error returned by
// UpdateTagRequest.Validate if the designated constraints aren't met.
type UpdateTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTagRequestValidationError) ErrorName() string { return "UpdateTagRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTagRequestValidationError{}

// Validate checks the field values on UpdateTagResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateTagResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTagResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateTagResponseValidationError is the validation error returned by
// UpdateTagResponse.Validate if the designated constraints aren't met.
type UpdateTagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTagResponseValidationError) ErrorName() string {
	return "UpdateTagResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTagResponseValidationError{}

// Validate checks the field values on DeleteTagRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteTagRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteTagRequestValidationError is the validation error returned by
// DeleteTagRequest.Validate if the designated constraints aren't met.
type DeleteTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTagRequestValidationError) ErrorName() string { return "DeleteTagRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTagRequestValidationError{}

// Validate checks the field values on DeleteTagsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteTagsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteTagsRequestValidationError is the validation error returned by
// DeleteTagsRequest.Validate if the designated constraints aren't met.
type DeleteTagsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTagsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTagsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTagsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTagsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTagsRequestValidationError) ErrorName() string {
	return "DeleteTagsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTagsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTagsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTagsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTagsRequestValidationError{}

// Validate checks the field values on DeleteTagResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteTagResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteTagResponseValidationError is the validation error returned by
// DeleteTagResponse.Validate if the designated constraints aren't met.
type DeleteTagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTagResponseValidationError) ErrorName() string {
	return "DeleteTagResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTagResponseValidationError{}

// Validate checks the field values on Folio with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Folio) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for UUID

	// no validation rules for Name

	// no validation rules for Desc

	for idx, item := range m.GetAssets() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FolioValidationError{
					field:  fmt.Sprintf("Assets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetNotes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FolioValidationError{
					field:  fmt.Sprintf("Notes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FolioValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FolioValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetShares() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FolioValidationError{
					field:  fmt.Sprintf("Shares[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetThumbnail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FolioValidationError{
				field:  "Thumbnail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FolioValidationError is the validation error returned by Folio.Validate if
// the designated constraints aren't met.
type FolioValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FolioValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FolioValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FolioValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FolioValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FolioValidationError) ErrorName() string { return "FolioValidationError" }

// Error satisfies the builtin error interface
func (e FolioValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFolio.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FolioValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FolioValidationError{}

// Validate checks the field values on CreateFolioRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateFolioRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFolioRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateFolioRequestValidationError is the validation error returned by
// CreateFolioRequest.Validate if the designated constraints aren't met.
type CreateFolioRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFolioRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFolioRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFolioRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFolioRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFolioRequestValidationError) ErrorName() string {
	return "CreateFolioRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFolioRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFolioRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFolioRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFolioRequestValidationError{}

// Validate checks the field values on CreateFolioResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateFolioResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFolioResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateFolioResponseValidationError is the validation error returned by
// CreateFolioResponse.Validate if the designated constraints aren't met.
type CreateFolioResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFolioResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFolioResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFolioResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFolioResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFolioResponseValidationError) ErrorName() string {
	return "CreateFolioResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFolioResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFolioResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFolioResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFolioResponseValidationError{}

// Validate checks the field values on ReadFolioRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ReadFolioRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// ReadFolioRequestValidationError is the validation error returned by
// ReadFolioRequest.Validate if the designated constraints aren't met.
type ReadFolioRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadFolioRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadFolioRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadFolioRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadFolioRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadFolioRequestValidationError) ErrorName() string { return "ReadFolioRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReadFolioRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadFolioRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadFolioRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadFolioRequestValidationError{}

// Validate checks the field values on ReadFolioResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ReadFolioResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadFolioResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadFolioResponseValidationError is the validation error returned by
// ReadFolioResponse.Validate if the designated constraints aren't met.
type ReadFolioResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadFolioResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadFolioResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadFolioResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadFolioResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadFolioResponseValidationError) ErrorName() string {
	return "ReadFolioResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadFolioResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadFolioResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadFolioResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadFolioResponseValidationError{}

// Validate checks the field values on UpdateFolioRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateFolioRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFolioRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGerogeriGegege()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFolioRequestValidationError{
				field:  "GerogeriGegege",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateFolioRequestValidationError is the validation error returned by
// UpdateFolioRequest.Validate if the designated constraints aren't met.
type UpdateFolioRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFolioRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFolioRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFolioRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFolioRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFolioRequestValidationError) ErrorName() string {
	return "UpdateFolioRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFolioRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFolioRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFolioRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFolioRequestValidationError{}

// Validate checks the field values on UpdateFolioResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateFolioResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFolioResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateFolioResponseValidationError is the validation error returned by
// UpdateFolioResponse.Validate if the designated constraints aren't met.
type UpdateFolioResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFolioResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFolioResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFolioResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFolioResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFolioResponseValidationError) ErrorName() string {
	return "UpdateFolioResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFolioResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFolioResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFolioResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFolioResponseValidationError{}

// Validate checks the field values on DeleteFolioRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteFolioRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteFolioRequestValidationError is the validation error returned by
// DeleteFolioRequest.Validate if the designated constraints aren't met.
type DeleteFolioRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFolioRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFolioRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFolioRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFolioRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFolioRequestValidationError) ErrorName() string {
	return "DeleteFolioRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFolioRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFolioRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFolioRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFolioRequestValidationError{}

// Validate checks the field values on DeleteFoliosRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteFoliosRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteFoliosRequestValidationError is the validation error returned by
// DeleteFoliosRequest.Validate if the designated constraints aren't met.
type DeleteFoliosRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFoliosRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFoliosRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFoliosRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFoliosRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFoliosRequestValidationError) ErrorName() string {
	return "DeleteFoliosRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFoliosRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFoliosRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFoliosRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFoliosRequestValidationError{}

// Validate checks the field values on DeleteFolioResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteFolioResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteFolioResponseValidationError is the validation error returned by
// DeleteFolioResponse.Validate if the designated constraints aren't met.
type DeleteFolioResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFolioResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFolioResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFolioResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFolioResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFolioResponseValidationError) ErrorName() string {
	return "DeleteFolioResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFolioResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFolioResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFolioResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFolioResponseValidationError{}

// Validate checks the field values on Asset with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Asset) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	if v, ok := interface{}(m.GetFolio()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetValidationError{
				field:  "Folio",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UUID

	// no validation rules for Path

	if v, ok := interface{}(m.GetAsset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetValidationError{
				field:  "Asset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Blob

	if v, ok := interface{}(m.GetThumbnail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetValidationError{
				field:  "Thumbnail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AssetValidationError is the validation error returned by Asset.Validate if
// the designated constraints aren't met.
type AssetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetValidationError) ErrorName() string { return "AssetValidationError" }

// Error satisfies the builtin error interface
func (e AssetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAsset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetValidationError{}

// Validate checks the field values on CreateAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAssetRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAssetRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateAssetRequestValidationError is the validation error returned by
// CreateAssetRequest.Validate if the designated constraints aren't met.
type CreateAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAssetRequestValidationError) ErrorName() string {
	return "CreateAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAssetRequestValidationError{}

// Validate checks the field values on CreateAssetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAssetResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAssetResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateAssetResponseValidationError is the validation error returned by
// CreateAssetResponse.Validate if the designated constraints aren't met.
type CreateAssetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAssetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAssetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAssetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAssetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAssetResponseValidationError) ErrorName() string {
	return "CreateAssetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAssetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAssetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAssetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAssetResponseValidationError{}

// Validate checks the field values on ReadAssetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ReadAssetRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// ReadAssetRequestValidationError is the validation error returned by
// ReadAssetRequest.Validate if the designated constraints aren't met.
type ReadAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadAssetRequestValidationError) ErrorName() string { return "ReadAssetRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReadAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadAssetRequestValidationError{}

// Validate checks the field values on ReadAssetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ReadAssetResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadAssetResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadAssetResponseValidationError is the validation error returned by
// ReadAssetResponse.Validate if the designated constraints aren't met.
type ReadAssetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadAssetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadAssetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadAssetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadAssetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadAssetResponseValidationError) ErrorName() string {
	return "ReadAssetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadAssetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadAssetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadAssetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadAssetResponseValidationError{}

// Validate checks the field values on UpdateAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateAssetRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAssetRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGerogeriGegege()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAssetRequestValidationError{
				field:  "GerogeriGegege",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateAssetRequestValidationError is the validation error returned by
// UpdateAssetRequest.Validate if the designated constraints aren't met.
type UpdateAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAssetRequestValidationError) ErrorName() string {
	return "UpdateAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAssetRequestValidationError{}

// Validate checks the field values on UpdateAssetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateAssetResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAssetResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateAssetResponseValidationError is the validation error returned by
// UpdateAssetResponse.Validate if the designated constraints aren't met.
type UpdateAssetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAssetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAssetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAssetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAssetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAssetResponseValidationError) ErrorName() string {
	return "UpdateAssetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAssetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAssetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAssetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAssetResponseValidationError{}

// Validate checks the field values on DeleteAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteAssetRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteAssetRequestValidationError is the validation error returned by
// DeleteAssetRequest.Validate if the designated constraints aren't met.
type DeleteAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAssetRequestValidationError) ErrorName() string {
	return "DeleteAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAssetRequestValidationError{}

// Validate checks the field values on DeleteAssetsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteAssetsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteAssetsRequestValidationError is the validation error returned by
// DeleteAssetsRequest.Validate if the designated constraints aren't met.
type DeleteAssetsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAssetsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAssetsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAssetsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAssetsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAssetsRequestValidationError) ErrorName() string {
	return "DeleteAssetsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAssetsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAssetsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAssetsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAssetsRequestValidationError{}

// Validate checks the field values on DeleteAssetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteAssetResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteAssetResponseValidationError is the validation error returned by
// DeleteAssetResponse.Validate if the designated constraints aren't met.
type DeleteAssetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAssetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAssetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAssetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAssetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAssetResponseValidationError) ErrorName() string {
	return "DeleteAssetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAssetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAssetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAssetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAssetResponseValidationError{}

// Validate checks the field values on Note with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Note) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Note

	if v, ok := interface{}(m.GetFolio()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NoteValidationError{
				field:  "Folio",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetThumbnail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NoteValidationError{
				field:  "Thumbnail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NoteValidationError is the validation error returned by Note.Validate if the
// designated constraints aren't met.
type NoteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoteValidationError) ErrorName() string { return "NoteValidationError" }

// Error satisfies the builtin error interface
func (e NoteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNote.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoteValidationError{}

// Validate checks the field values on CreateNoteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateNoteRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNoteRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateNoteRequestValidationError is the validation error returned by
// CreateNoteRequest.Validate if the designated constraints aren't met.
type CreateNoteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNoteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNoteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNoteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNoteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNoteRequestValidationError) ErrorName() string {
	return "CreateNoteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNoteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNoteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNoteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNoteRequestValidationError{}

// Validate checks the field values on CreateNoteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateNoteResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNoteResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateNoteResponseValidationError is the validation error returned by
// CreateNoteResponse.Validate if the designated constraints aren't met.
type CreateNoteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNoteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNoteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNoteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNoteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNoteResponseValidationError) ErrorName() string {
	return "CreateNoteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNoteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNoteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNoteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNoteResponseValidationError{}

// Validate checks the field values on ReadNoteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ReadNoteRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// ReadNoteRequestValidationError is the validation error returned by
// ReadNoteRequest.Validate if the designated constraints aren't met.
type ReadNoteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadNoteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadNoteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadNoteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadNoteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadNoteRequestValidationError) ErrorName() string { return "ReadNoteRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReadNoteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadNoteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadNoteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadNoteRequestValidationError{}

// Validate checks the field values on ReadNoteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ReadNoteResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadNoteResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadNoteResponseValidationError is the validation error returned by
// ReadNoteResponse.Validate if the designated constraints aren't met.
type ReadNoteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadNoteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadNoteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadNoteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadNoteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadNoteResponseValidationError) ErrorName() string { return "ReadNoteResponseValidationError" }

// Error satisfies the builtin error interface
func (e ReadNoteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadNoteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadNoteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadNoteResponseValidationError{}

// Validate checks the field values on UpdateNoteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateNoteRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNoteRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGerogeriGegege()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNoteRequestValidationError{
				field:  "GerogeriGegege",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateNoteRequestValidationError is the validation error returned by
// UpdateNoteRequest.Validate if the designated constraints aren't met.
type UpdateNoteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNoteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNoteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNoteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNoteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNoteRequestValidationError) ErrorName() string {
	return "UpdateNoteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNoteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNoteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNoteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNoteRequestValidationError{}

// Validate checks the field values on UpdateNoteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateNoteResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNoteResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateNoteResponseValidationError is the validation error returned by
// UpdateNoteResponse.Validate if the designated constraints aren't met.
type UpdateNoteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNoteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNoteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNoteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNoteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNoteResponseValidationError) ErrorName() string {
	return "UpdateNoteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNoteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNoteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNoteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNoteResponseValidationError{}

// Validate checks the field values on DeleteNoteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteNoteRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteNoteRequestValidationError is the validation error returned by
// DeleteNoteRequest.Validate if the designated constraints aren't met.
type DeleteNoteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNoteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNoteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNoteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNoteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNoteRequestValidationError) ErrorName() string {
	return "DeleteNoteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNoteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNoteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNoteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNoteRequestValidationError{}

// Validate checks the field values on DeleteNotesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteNotesRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteNotesRequestValidationError is the validation error returned by
// DeleteNotesRequest.Validate if the designated constraints aren't met.
type DeleteNotesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNotesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNotesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNotesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNotesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNotesRequestValidationError) ErrorName() string {
	return "DeleteNotesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNotesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNotesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNotesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNotesRequestValidationError{}

// Validate checks the field values on DeleteNoteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteNoteResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteNoteResponseValidationError is the validation error returned by
// DeleteNoteResponse.Validate if the designated constraints aren't met.
type DeleteNoteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNoteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNoteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNoteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNoteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNoteResponseValidationError) ErrorName() string {
	return "DeleteNoteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNoteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNoteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNoteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNoteResponseValidationError{}
