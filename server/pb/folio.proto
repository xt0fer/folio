syntax = "proto3";

import "google/api/annotations.proto";
import "validate/validate.proto";
//import "google/protobuf/empty.proto";
import "github.com/infobloxopen/protoc-gen-gorm/options/gorm.proto";
import "google/protobuf/field_mask.proto";
//import "github.com/infobloxopen/atlas-app-toolkit/query/collection_operators.proto";
import "infoblox/api/collection_operators.proto";

package folio;

// import "google/protobuf/timestamp.proto";
//import "github.com/infobloxopen/atlas-app-toolkit/rpc/resource/resource.proto";
// //
// // Account is the top level entity for as a client account
// //
// message Account  {
// 	option (gorm.opts).ormable = true;
// 	uint32 id = 1;
// 	string UUID = 2;
// 	string Name = 3;
// 	string Nickname = 4;
// 	string Kind = 5;
// 	// links
// 	Archive Archive = 11;
// 	repeated User Users = 12;
// }


// // Convention dictates that we have separate Request and Response message types
// // for each API call, so that they can be alterred later without having to fear
// // breaking a contract in any of the other services.

// message CreateAccountRequest {
//     // Convention dictates that this field be of the given type, and be
//     // named 'payload' in order to autogenerate the handler
//     Account payload = 1;
// }

// message CreateAccountResponse {
//     // Convention also requires that the return type be the same and named 'result'
//     Account result = 1;
// }

// message ReadAccountRequest {
//     // For a read request, the id field is the only to be specified
//     uint32 id = 1;
//     infoblox.api.FieldSelection fields = 2;
// }

// message ReadAccountResponse {
//     // Again the type with 'result' name
//     Account result = 1;
// }

// message UpdateAccountRequest {
//     Account payload = 1;
//     google.protobuf.FieldMask gerogeri_gegege = 2;
// }

// message UpdateAccountResponse {
//     Account result = 1;
// }

// message DeleteAccountRequest {
//     // Only the id is needed for a delete request
//     uint32 id = 1;
// }

// message DeleteAccountsRequest {
//     // Only the id is needed for a delete request
//     repeated uint32 ids = 1;
// }

// // By convention, on DELETE no response data is given, so either a
// // google.protobuf.empty, or an empty struct is sufficient
// message DeleteAccountResponse {
// }

// message ListAccountResponse {
//     // Note repeated field and plural name 'results'
//     repeated Account results = 1;
//     infoblox.api.PageInfo page_info = 2;
// }

// message ListSomethingResponse {
//     // Note repeated field and plural name 'results'
//     repeated Something results = 1;
//     infoblox.api.PageInfo page_info = 2;
// }


// // A dummy type to demo an rpc that can't be autogenerated
// message Something {
//     option (gorm.opts).ormable = true;
//     string field = 1;
// }

// message ListAccountRequest {
//     infoblox.api.Filtering filter = 1;
//     infoblox.api.Sorting order_by = 2;
//     infoblox.api.FieldSelection fields = 3;
//     infoblox.api.Pagination paging = 4;
// }

// FolioService
service FolioService {
  // This option tells protoc-gen-gorm to generate the calls and stubs
  option (gorm.server).autogen = true;
 
  rpc CreateUser ( CreateUserRequest ) returns ( CreateUserResponse ) {}
  rpc ReadUser ( ReadUserRequest ) returns ( ReadUserResponse ) {}
  rpc UpdateUser ( UpdateUserRequest ) returns ( UpdateUserResponse ) {}
  rpc ListUser ( ListUserRequest ) returns ( ListUserResponse ) {}
  //rpc ListSomething( google.protobuf.Empty ) returns ( ListSomethingResponse ) {}
  rpc DeleteUser ( DeleteUserRequest ) returns  ( DeleteUserResponse ) {
	  // This option is required because the type/table can't be inferred
	  // by the return type
	  option (gorm.method).object_type = "User";
  }
 
  rpc CreateFolio ( CreateFolioRequest ) returns ( CreateFolioResponse ) {}
  rpc ReadFolio ( ReadFolioRequest ) returns ( ReadFolioResponse ) {}
  rpc UpdateFolio ( UpdateFolioRequest ) returns ( UpdateFolioResponse ) {}
  //rpc ListFolio ( ListFolioRequest ) returns ( ListFolioResponse ) {}
  //rpc ListSomething( google.protobuf.Empty ) returns ( ListSomethingResponse ) {}
  rpc DeleteFolio ( DeleteFolioRequest ) returns  ( DeleteFolioResponse ) {
      // This option is required because the type/table can't be inferred
      // by the return type
      option (gorm.method).object_type = "Folio";
  }

  rpc CreateTag ( CreateTagRequest ) returns ( CreateTagResponse ) {}
  rpc ReadTag ( ReadTagRequest ) returns ( ReadTagResponse ) {}
  rpc UpdateTag ( UpdateTagRequest ) returns ( UpdateTagResponse ) {}
  //rpc ListTag ( ListTagRequest ) returns ( ListTagResponse ) {}
  //rpc ListSomething( google.protobuf.Empty ) returns ( ListSomethingResponse ) {}
  rpc DeleteTag ( DeleteTagRequest ) returns  ( DeleteTagResponse ) {
      // This option is required because the type/table can't be inferred
      // by the return type
      option (gorm.method).object_type = "Tag";
  }

  rpc CreateNote ( CreateNoteRequest ) returns ( CreateNoteResponse ) {}
  rpc ReadNote ( ReadNoteRequest ) returns ( ReadNoteResponse ) {}
  rpc UpdateNote ( UpdateNoteRequest ) returns ( UpdateNoteResponse ) {}
  //rpc ListNote ( ListNoteRequest ) returns ( ListNoteResponse ) {}
  //rpc ListSomething( google.protobuf.Empty ) returns ( ListSomethingResponse ) {}
  rpc DeleteNote ( DeleteNoteRequest ) returns  ( DeleteNoteResponse ) {
      // This option is required because the type/table can't be inferred
      // by the return type
      option (gorm.method).object_type = "Note";
  }

   
//   rpc CreateAccount ( CreateAccountRequest ) returns ( CreateAccountResponse ) {}
//   rpc ReadAccount ( ReadAccountRequest ) returns ( ReadAccountResponse ) {}
//   //rpc ReadAccountByEmail ( ReadAccountRequest ) returns ( ReadAccountResponse ) {}
//   rpc UpdateAccount ( UpdateAccountRequest ) returns ( UpdateAccountResponse ) {}
//   rpc ListAccount ( ListAccountRequest ) returns ( ListAccountResponse ) {}
//   rpc DeleteAccount ( DeleteAccountRequest ) returns  ( DeleteAccountResponse ) {
//       // This option is required because the type/table can't be inferred
//       // by the return type
//       option (gorm.method).object_type = "Account";
//   }
  // CustomMethod can't be autogenerated as it matches no conventions, it will
  // become a stub
  //rpc CustomMethod ( google.protobuf.Empty ) returns  ( google.protobuf.Empty ) {}
  // CreateSomething also doesn't match conventions and will become a stub
  //rpc CreateSomething ( Something ) returns  ( Something ) {}

//   rpc CreateArchive ( CreateArchiveRequest ) returns ( CreateArchiveResponse ) {}
//   rpc ReadArchive ( ReadArchiveRequest ) returns ( ReadArchiveResponse ) {}
//   rpc UpdateArchive ( UpdateArchiveRequest ) returns ( UpdateArchiveResponse ) {}
//   rpc ListArchive ( ListArchiveRequest ) returns ( ListArchiveResponse ) {}
//   rpc DeleteArchive ( DeleteArchiveRequest ) returns  ( DeleteArchiveResponse ) {
//       // This option is required because the type/table can't be inferred
//       // by the return type
//       option (gorm.method).object_type = "Archive";
//   }

}

service FolioTxn {
  // This option tells protoc-gen-gorm to generate the calls and stubs, and
  // the transaction middleware will be used
  option (gorm.server) = {autogen: true, txn_middleware: true};


  rpc CreateUser ( CreateUserRequest ) returns ( CreateUserResponse ) {}
  rpc ReadUser ( ReadUserRequest ) returns ( ReadUserResponse ) {}
  rpc UpdateUser ( UpdateUserRequest ) returns ( UpdateUserResponse ) {}
  rpc ListUser ( ListUserRequest ) returns ( ListUserResponse ) {}
  //rpc ListSomething( google.protobuf.Empty ) returns ( ListSomethingResponse ) {}
  rpc DeleteUser ( DeleteUserRequest ) returns  ( DeleteUserResponse ) {
      // This option is required because the type/table can't be inferred
      // by the return type
      option (gorm.method).object_type = "User";
  }

  //   rpc CreateAccount ( CreateAccountRequest ) returns ( CreateAccountResponse ) {}
//   rpc ReadAccount ( ReadAccountRequest ) returns ( ReadAccountResponse ) {}
//   rpc UpdateAccount ( UpdateAccountRequest ) returns ( UpdateAccountResponse ) {}
//   rpc ListAccount ( ListAccountRequest ) returns ( ListAccountResponse ) {}
//   rpc DeleteAccount ( DeleteAccountRequest ) returns  ( DeleteAccountResponse ) {
//       // This option is required because the type/table can't be inferred
//       // by the return type
//       option (gorm.method).object_type = "Account";
//   }
  // CustomMethod can't be autogenerated as it matches no conventions, it will
  // become a stub
  //rpc CustomMethod ( google.protobuf.Empty ) returns  ( google.protobuf.Empty ) {}
  // CreateSomething also doesn't match conventions and will become a stub
  //rpc CreateSomething ( Something ) returns  ( Something ) {}
//   rpc CreateArchive ( CreateArchiveRequest ) returns ( CreateArchiveResponse ) {}
//   rpc ReadArchive ( ReadArchiveRequest ) returns ( ReadArchiveResponse ) {}
//   rpc UpdateArchive ( UpdateArchiveRequest ) returns ( UpdateArchiveResponse ) {}
//   rpc ListArchive ( ListArchiveRequest ) returns ( ListArchiveResponse ) {}
//   rpc DeleteArchive ( DeleteArchiveRequest ) returns  ( DeleteArchiveResponse ) {
//       // This option is required because the type/table can't be inferred
//       // by the return type
//       option (gorm.method).object_type = "Archive";
//   }

  rpc CreateFolio ( CreateFolioRequest ) returns ( CreateFolioResponse ) {}
  rpc ReadFolio ( ReadFolioRequest ) returns ( ReadFolioResponse ) {}
  rpc UpdateFolio ( UpdateFolioRequest ) returns ( UpdateFolioResponse ) {}
  rpc ListFolio ( ListFolioRequest ) returns ( ListFolioResponse ) {}
  //rpc ListSomething( google.protobuf.Empty ) returns ( ListSomethingResponse ) {}
  rpc DeleteFolio ( DeleteFolioRequest ) returns  ( DeleteFolioResponse ) {
      // This option is required because the type/table can't be inferred
      // by the return type
      option (gorm.method).object_type = "Folio";
  }

  rpc CreateTag ( CreateTagRequest ) returns ( CreateTagResponse ) {}
  rpc ReadTag ( ReadTagRequest ) returns ( ReadTagResponse ) {}
  rpc UpdateTag ( UpdateTagRequest ) returns ( UpdateTagResponse ) {}
  rpc ListTag ( ListTagRequest ) returns ( ListTagResponse ) {}
  //rpc ListSomething( google.protobuf.Empty ) returns ( ListSomethingResponse ) {}
  rpc DeleteTag ( DeleteTagRequest ) returns  ( DeleteTagResponse ) {
      // This option is required because the type/table can't be inferred
      // by the return type
      option (gorm.method).object_type = "Tag";
  }

  rpc CreateNote ( CreateNoteRequest ) returns ( CreateNoteResponse ) {}
  rpc ReadNote ( ReadNoteRequest ) returns ( ReadNoteResponse ) {}
  rpc UpdateNote ( UpdateNoteRequest ) returns ( UpdateNoteResponse ) {}
  rpc ListNote ( ListNoteRequest ) returns ( ListNoteResponse ) {}
  //rpc ListSomething( google.protobuf.Empty ) returns ( ListSomethingResponse ) {}
  rpc DeleteNote ( DeleteNoteRequest ) returns  ( DeleteNoteResponse ) {
      // This option is required because the type/table can't be inferred
      // by the return type
      option (gorm.method).object_type = "Note";
  }

  rpc CreateAsset ( CreateAssetRequest ) returns ( CreateAssetResponse ) {}
  rpc ReadAsset ( ReadAssetRequest ) returns ( ReadAssetResponse ) {}
  rpc UpdateAsset ( UpdateAssetRequest ) returns ( UpdateAssetResponse ) {}
  rpc ListAsset ( ListAssetRequest ) returns ( ListAssetResponse ) {}
  //rpc ListSomething( google.protobuf.Empty ) returns ( ListSomethingResponse ) {}
  rpc DeleteAsset ( DeleteAssetRequest ) returns  ( DeleteAssetResponse ) {
      // This option is required because the type/table can't be inferred
      // by the return type
      option (gorm.method).object_type = "Asset";
  }

  rpc CreateShare ( CreateShareRequest ) returns ( CreateShareResponse ) {}
  rpc ReadShare ( ReadShareRequest ) returns ( ReadShareResponse ) {}
  rpc UpdateShare ( UpdateShareRequest ) returns ( UpdateShareResponse ) {}
  rpc ListShare ( ListShareRequest ) returns ( ListShareResponse ) {}
  //rpc ListSomething( google.protobuf.Empty ) returns ( ListSomethingResponse ) {}
  rpc DeleteShare ( DeleteShareRequest ) returns  ( DeleteShareResponse ) {
      // This option is required because the type/table can't be inferred
      // by the return type
      option (gorm.method).object_type = "Share";
  }

}

// User human message who owns the archive
message User  {
	option (gorm.opts).ormable = true;
	uint32 id = 1;
	string Email = 2;     //string `gorm:"unique;not null"`
	string Firstname = 3; //string
    string Lastname = 4;  //string
    Asset Thumbnail = 14;
	//links
	// Account account = 6 ; //[(gorm.field).belongs_to = {}];
}


// service UserService {
// 	// This option tells protoc-gen-gorm to generate the calls and stubs
// 	option (gorm.server).autogen = true;

// }

// Convention dictates that we have separate Request and Response message types
// for each API call, so that they can be alterred later without having to fear
// breaking a contract in any of the other services.

message CreateUserRequest {
    // Convention dictates that this field be of the given type, and be
    // named 'payload' in order to autogenerate the handler
    User payload = 1;
}

message CreateUserResponse {
    // Convention also requires that the return type be the same and named 'result'
    User result = 1;
}

message ReadUserRequest {
    // For a read request, the id field is the only to be specified
    uint32 id = 1;
    //infoblox.api.FieldSelection fields = 2;
}

message ReadUserResponse {
    // Again the type with 'result' name
    User result = 1;
}

message UpdateUserRequest {
    User payload = 1;
    google.protobuf.FieldMask gerogeri_gegege = 2;
}

message UpdateUserResponse {
    User result = 1;
}

message DeleteUserRequest {
    // Only the id is needed for a delete request
    uint32 id = 1;
}

message DeleteUsersRequest {
    // Only the id is needed for a delete request
    repeated uint32 ids = 1;
}

// By convention, on DELETE no response data is given, so either a
// google.protobuf.empty, or an empty struct is sufficient
message DeleteUserResponse {
}

message ListUserResponse {
    // Note repeated field and plural name 'results'
    repeated User results = 1;
    infoblox.api.PageInfo page_info = 2;
}

message ListUserRequest {
    infoblox.api.Filtering filter = 1;
    infoblox.api.Sorting order_by = 2;
    infoblox.api.FieldSelection fields = 3;
    infoblox.api.Pagination paging = 4;
}


// // Archive is the container for a bunch of Folios
// message Archive  {
// 	option (gorm.opts).ormable = true;
// 	uint32 id = 1;
// 	string UUID = 2; //string `gorm:"unique;not null"`
// 	string Name = 3; //string
// 	string Desc = 4; //string
// 	// links
// 	repeated Folio  Folios = 6;
// 	//Account account = 7 ; //[(gorm.field).belongs_to = {}];
// 	User    owner = 8 ; //[(gorm.field).belongs_to = {}];
// }


// // Convention dictates that we have separate Request and Response message types
// // for each API call, so that they can be alterred later without having to fear
// // breaking a contract in any of the other services.

// message CreateArchiveRequest {
//     // Convention dictates that this field be of the given type, and be
//     // named 'payload' in order to autogenerate the handler
//     Archive payload = 1;
// }

// message CreateArchiveResponse {
//     // Convention also requires that the return type be the same and named 'result'
//     Archive result = 1;
// }

// message ReadArchiveRequest {
//     // For a read request, the id field is the only to be specified
//     uint32 id = 1;
//     infoblox.api.FieldSelection fields = 2;
// }

// message ReadArchiveResponse {
//     // Again the type with 'result' name
//     Archive result = 1;
// }

// message UpdateArchiveRequest {
//     Archive payload = 1;
//     google.protobuf.FieldMask gerogeri_gegege = 2;
// }

// message UpdateArchiveResponse {
//     Archive result = 1;
// }

// message DeleteArchiveRequest {
//     // Only the id is needed for a delete request
//     uint32 id = 1;
// }

// message DeleteArchivesRequest {
//     // Only the id is needed for a delete request
//     repeated uint32 ids = 1;
// }

// // By convention, on DELETE no response data is given, so either a
// // google.protobuf.empty, or an empty struct is sufficient
// message DeleteArchiveResponse {
// }

// message ListArchiveResponse {
//     // Note repeated field and plural name 'results'
//     repeated Archive results = 1;
//     infoblox.api.PageInfo page_info = 2;
// }

// message ListArchiveRequest {
//     infoblox.api.Filtering filter = 1;
//     infoblox.api.Sorting order_by = 2;
//     infoblox.api.FieldSelection fields = 3;
//     infoblox.api.Pagination paging = 4;
// }

// Share is a linkage allowing someone to work with the contents of a folio
message Share  { 
	option (gorm.opts).ormable = true;
	uint32 id = 1;
	User friend = 2;    // needs to be a PersonTag
    Asset Thumbnail = 14;
	repeated Folio folios  = 6 [(gorm.field).many_to_many = {}]; //Folios []*Folio `gorm:"many2many:folio_shares;"`
}


// Convention dictates that we have separate Request and Response message types
// for each API call, so that they can be alterred later without having to fear
// breaking a contract in any of the other services.

message CreateShareRequest {
    // Convention dictates that this field be of the given type, and be
    // named 'payload' in order to autogenerate the handler
    Share payload = 1;
}

message CreateShareResponse {
    // Convention also requires that the return type be the same and named 'result'
    Share result = 1;
}

message ReadShareRequest {
    // For a read request, the id field is the only to be specified
    uint32 id = 1;
    //infoblox.api.FieldSelection fields = 2;
}

message ReadShareResponse {
    // Again the type with 'result' name
    Share result = 1;
}

message UpdateShareRequest {
    Share payload = 1;
    google.protobuf.FieldMask gerogeri_gegege = 2;
}

message UpdateShareResponse {
    Share result = 1;
}

message DeleteShareRequest {
    // Only the id is needed for a delete request
    uint32 id = 1;
}

message DeleteSharesRequest {
    // Only the id is needed for a delete request
    repeated uint32 ids = 1;
}

// By convention, on DELETE no response data is given, so either a
// google.protobuf.empty, or an empty struct is sufficient
message DeleteShareResponse {
}

message ListShareResponse {
    // Share repeated field and plural name 'results'
    repeated Share results = 1;
    infoblox.api.PageInfo page_info = 2;
}


message ListShareRequest {
    infoblox.api.Filtering filter = 1;
    infoblox.api.Sorting order_by = 2;
    infoblox.api.FieldSelection fields = 3;
    infoblox.api.Pagination paging = 4;
}

// Tag is a attribute on something
message Tag  {
	option (gorm.opts).ormable = true;
	uint32 id = 1;
	uint32 Kind = 2; // need an ENUM here
	string Label = 3;
	string Desc = 4;
	// links
	repeated Folio folios  = 6 [(gorm.field).many_to_many = {}]; //`gorm:"many2many:folio_tags;"`
    Asset Thumbnail = 14;
}


// Convention dictates that we have separate Request and Response message types
// for each API call, so that they can be alterred later without having to fear
// breaking a contract in any of the other services.

message CreateTagRequest {
    // Convention dictates that this field be of the given type, and be
    // named 'payload' in order to autogenerate the handler
    Tag payload = 1;
}

message CreateTagResponse {
    // Convention also requires that the return type be the same and named 'result'
    Tag result = 1;
}

message ReadTagRequest {
    // For a read request, the id field is the only to be specified
    uint32 id = 1;
    //infoblox.api.FieldSelection fields = 2;
}

message ReadTagResponse {
    // Again the type with 'result' name
    Tag result = 1;
}

message UpdateTagRequest {
    Tag payload = 1;
    google.protobuf.FieldMask gerogeri_gegege = 2;
}

message UpdateTagResponse {
    Tag result = 1;
}

message DeleteTagRequest {
    // Only the id is needed for a delete request
    uint32 id = 1;
}

message DeleteTagsRequest {
    // Only the id is needed for a delete request
    repeated uint32 ids = 1;
}

// By convention, on DELETE no response data is given, so either a
// google.protobuf.empty, or an empty struct is sufficient
message DeleteTagResponse {
}

message ListTagResponse {
    // Tag repeated field and plural name 'results'
    repeated Tag results = 1;
    infoblox.api.PageInfo page_info = 2;
}


message ListTagRequest {
    infoblox.api.Filtering filter = 1;
    infoblox.api.Sorting order_by = 2;
    infoblox.api.FieldSelection fields = 3;
    infoblox.api.Pagination paging = 4;
}
// // Tagmessage used to make tags have kinds.
// message Tagmessage int

// // Person, Place, Thing, Category are the way things can be tagged.
// const (
// 	TagCategory Tagmessage = iota
// 	TagPerson
// 	TagPlace
// 	TagThing
// )

// Folio center piece
message Folio  {
	option (gorm.opts).ormable = true;
	uint32 id = 1;
	string UUID = 2;  //`gorm:"unique;not null;index:foliouuid"`
	string Name = 3;  //string
	string Desc = 4;  //string
    //Archive archive = 5;
	repeated Asset Assets = 6;
	repeated Note  Notes = 7;
    User Owner = 8;
	// links
	//Tags      []*Tag   `gorm:"many2many:folio_tags;"`
	repeated Tag tags = 10 [(gorm.field).many_to_many = {}];
	//Shares    []*Share `gorm:"many2many:folio_shares;"`
	repeated Share shares = 11 [(gorm.field).many_to_many = {}];
    Asset Thumbnail = 14;
}


// Convention dictates that we have separate Request and Response message types
// for each API call, so that they can be alterred later without having to fear
// breaking a contract in any of the other services.

message CreateFolioRequest {
    // Convention dictates that this field be of the given type, and be
    // named 'payload' in order to autogenerate the handler
    Folio payload = 1;
}

message CreateFolioResponse {
    // Convention also requires that the return type be the same and named 'result'
    Folio result = 1;
}

message ReadFolioRequest {
    // For a read request, the id field is the only to be specified
    uint32 id = 1;
    //infoblox.api.FieldSelection fields = 2;
}

message ReadFolioResponse {
    // Again the type with 'result' name
    Folio result = 1;
}

message UpdateFolioRequest {
    Folio payload = 1;
    google.protobuf.FieldMask gerogeri_gegege = 2;
}

message UpdateFolioResponse {
    Folio result = 1;
}

message DeleteFolioRequest {
    // Only the id is needed for a delete request
    uint32 id = 1;
}

message DeleteFoliosRequest {
    // Only the id is needed for a delete request
    repeated uint32 ids = 1;
}

// By convention, on DELETE no response data is given, so either a
// google.protobuf.empty, or an empty struct is sufficient
message DeleteFolioResponse {
}

message ListFolioResponse {
    // Note repeated field and plural name 'results'
    repeated Folio results = 1;
    infoblox.api.PageInfo page_info = 2;
}


message ListFolioRequest {
    infoblox.api.Filtering filter = 1;
    infoblox.api.Sorting order_by = 2;
    infoblox.api.FieldSelection fields = 3;
    infoblox.api.Pagination paging = 4;
}

// Asset main doc
message Asset  {
	option (gorm.opts).ormable = true;
	uint32 id = 1;
	string Name = 2;
	Folio folio = 3;
	string UUID = 4;  //`gorm:"unique;not null;index:foliouuid"`
	string Path = 5;  //string
	Asset asset = 6;
	bytes blob = 20;
    Asset Thumbnail = 14;
}


// Convention dictates that we have separate Request and Response message types
// for each API call, so that they can be alterred later without having to fear
// breaking a contract in any of the other services.

message CreateAssetRequest {
    // Convention dictates that this field be of the given type, and be
    // named 'payload' in order to autogenerate the handler
    Asset payload = 1;
}

message CreateAssetResponse {
    // Convention also requires that the return type be the same and named 'result'
    Asset result = 1;
}

message ReadAssetRequest {
    // For a read request, the id field is the only to be specified
    uint32 id = 1;
    //infoblox.api.FieldSelection fields = 2;
}

message ReadAssetResponse {
    // Again the type with 'result' name
    Asset result = 1;
}

message UpdateAssetRequest {
    Asset payload = 1;
    google.protobuf.FieldMask gerogeri_gegege = 2;
}

message UpdateAssetResponse {
    Asset result = 1;
}

message DeleteAssetRequest {
    // Only the id is needed for a delete request
    uint32 id = 1;
}

message DeleteAssetsRequest {
    // Only the id is needed for a delete request
    repeated uint32 ids = 1;
}

// By convention, on DELETE no response data is given, so either a
// google.protobuf.empty, or an empty struct is sufficient
message DeleteAssetResponse {
}

message ListAssetResponse {
    // Note repeated field and plural name 'results'
    repeated Asset results = 1;
    infoblox.api.PageInfo page_info = 2;
}


message ListAssetRequest {
    infoblox.api.Filtering filter = 1;
    infoblox.api.Sorting order_by = 2;
    infoblox.api.FieldSelection fields = 3;
    infoblox.api.Pagination paging = 4;
}

// Note text junk
message Note  {
	option (gorm.opts).ormable = true;
	uint32 id = 1;
	string Name = 3;  //string
	string Note = 4;  //string
	Folio folio = 6;
    Asset Thumbnail = 14;
}


// Convention dictates that we have separate Request and Response message types
// for each API call, so that they can be alterred later without having to fear
// breaking a contract in any of the other services.

message CreateNoteRequest {
    // Convention dictates that this field be of the given type, and be
    // named 'payload' in order to autogenerate the handler
    Note payload = 1;
}

message CreateNoteResponse {
    // Convention also requires that the return type be the same and named 'result'
    Note result = 1;
}

message ReadNoteRequest {
    // For a read request, the id field is the only to be specified
    uint32 id = 1;
    //infoblox.api.FieldSelection fields = 2;
}

message ReadNoteResponse {
    // Again the type with 'result' name
    Note result = 1;
}

message UpdateNoteRequest {
    Note payload = 1;
    google.protobuf.FieldMask gerogeri_gegege = 2;
}

message UpdateNoteResponse {
    Note result = 1;
}

message DeleteNoteRequest {
    // Only the id is needed for a delete request
    uint32 id = 1;
}

message DeleteNotesRequest {
    // Only the id is needed for a delete request
    repeated uint32 ids = 1;
}

// By convention, on DELETE no response data is given, so either a
// google.protobuf.empty, or an empty struct is sufficient
message DeleteNoteResponse {
}

message ListNoteResponse {
    // Note repeated field and plural name 'results'
    repeated Note results = 1;
    infoblox.api.PageInfo page_info = 2;
}


message ListNoteRequest {
    infoblox.api.Filtering filter = 1;
    infoblox.api.Sorting order_by = 2;
    infoblox.api.FieldSelection fields = 3;
    infoblox.api.Pagination paging = 4;
}