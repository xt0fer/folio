// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateAsset {
  count: Int!
}

type AggregateFolio {
  count: Int!
}

type AggregateLink {
  count: Int!
}

type AggregateNote {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateShare {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type AggregateThumbnail {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Asset {
  id: ID!
  name: String!
  uuid: String
  path: String
  note: String
  mimeType: String
  thumbnail: Thumbnail
  folio: Folio
}

type AssetConnection {
  pageInfo: PageInfo!
  edges: [AssetEdge]!
  aggregate: AggregateAsset!
}

input AssetCreateInput {
  name: String!
  uuid: String
  path: String
  note: String
  mimeType: String
  thumbnail: ThumbnailCreateOneInput
  folio: FolioCreateOneWithoutAssetsInput
}

input AssetCreateManyWithoutFolioInput {
  create: [AssetCreateWithoutFolioInput!]
  connect: [AssetWhereUniqueInput!]
}

input AssetCreateWithoutFolioInput {
  name: String!
  uuid: String
  path: String
  note: String
  mimeType: String
  thumbnail: ThumbnailCreateOneInput
}

type AssetEdge {
  node: Asset!
  cursor: String!
}

enum AssetOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  uuid_ASC
  uuid_DESC
  path_ASC
  path_DESC
  note_ASC
  note_DESC
  mimeType_ASC
  mimeType_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AssetPreviousValues {
  id: ID!
  name: String!
  uuid: String
  path: String
  note: String
  mimeType: String
}

input AssetScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  uuid: String
  uuid_not: String
  uuid_in: [String!]
  uuid_not_in: [String!]
  uuid_lt: String
  uuid_lte: String
  uuid_gt: String
  uuid_gte: String
  uuid_contains: String
  uuid_not_contains: String
  uuid_starts_with: String
  uuid_not_starts_with: String
  uuid_ends_with: String
  uuid_not_ends_with: String
  path: String
  path_not: String
  path_in: [String!]
  path_not_in: [String!]
  path_lt: String
  path_lte: String
  path_gt: String
  path_gte: String
  path_contains: String
  path_not_contains: String
  path_starts_with: String
  path_not_starts_with: String
  path_ends_with: String
  path_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  mimeType: String
  mimeType_not: String
  mimeType_in: [String!]
  mimeType_not_in: [String!]
  mimeType_lt: String
  mimeType_lte: String
  mimeType_gt: String
  mimeType_gte: String
  mimeType_contains: String
  mimeType_not_contains: String
  mimeType_starts_with: String
  mimeType_not_starts_with: String
  mimeType_ends_with: String
  mimeType_not_ends_with: String
  AND: [AssetScalarWhereInput!]
  OR: [AssetScalarWhereInput!]
  NOT: [AssetScalarWhereInput!]
}

type AssetSubscriptionPayload {
  mutation: MutationType!
  node: Asset
  updatedFields: [String!]
  previousValues: AssetPreviousValues
}

input AssetSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AssetWhereInput
  AND: [AssetSubscriptionWhereInput!]
  OR: [AssetSubscriptionWhereInput!]
  NOT: [AssetSubscriptionWhereInput!]
}

input AssetUpdateInput {
  name: String
  uuid: String
  path: String
  note: String
  mimeType: String
  thumbnail: ThumbnailUpdateOneInput
  folio: FolioUpdateOneWithoutAssetsInput
}

input AssetUpdateManyDataInput {
  name: String
  uuid: String
  path: String
  note: String
  mimeType: String
}

input AssetUpdateManyMutationInput {
  name: String
  uuid: String
  path: String
  note: String
  mimeType: String
}

input AssetUpdateManyWithoutFolioInput {
  create: [AssetCreateWithoutFolioInput!]
  delete: [AssetWhereUniqueInput!]
  connect: [AssetWhereUniqueInput!]
  set: [AssetWhereUniqueInput!]
  disconnect: [AssetWhereUniqueInput!]
  update: [AssetUpdateWithWhereUniqueWithoutFolioInput!]
  upsert: [AssetUpsertWithWhereUniqueWithoutFolioInput!]
  deleteMany: [AssetScalarWhereInput!]
  updateMany: [AssetUpdateManyWithWhereNestedInput!]
}

input AssetUpdateManyWithWhereNestedInput {
  where: AssetScalarWhereInput!
  data: AssetUpdateManyDataInput!
}

input AssetUpdateWithoutFolioDataInput {
  name: String
  uuid: String
  path: String
  note: String
  mimeType: String
  thumbnail: ThumbnailUpdateOneInput
}

input AssetUpdateWithWhereUniqueWithoutFolioInput {
  where: AssetWhereUniqueInput!
  data: AssetUpdateWithoutFolioDataInput!
}

input AssetUpsertWithWhereUniqueWithoutFolioInput {
  where: AssetWhereUniqueInput!
  update: AssetUpdateWithoutFolioDataInput!
  create: AssetCreateWithoutFolioInput!
}

input AssetWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  uuid: String
  uuid_not: String
  uuid_in: [String!]
  uuid_not_in: [String!]
  uuid_lt: String
  uuid_lte: String
  uuid_gt: String
  uuid_gte: String
  uuid_contains: String
  uuid_not_contains: String
  uuid_starts_with: String
  uuid_not_starts_with: String
  uuid_ends_with: String
  uuid_not_ends_with: String
  path: String
  path_not: String
  path_in: [String!]
  path_not_in: [String!]
  path_lt: String
  path_lte: String
  path_gt: String
  path_gte: String
  path_contains: String
  path_not_contains: String
  path_starts_with: String
  path_not_starts_with: String
  path_ends_with: String
  path_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  mimeType: String
  mimeType_not: String
  mimeType_in: [String!]
  mimeType_not_in: [String!]
  mimeType_lt: String
  mimeType_lte: String
  mimeType_gt: String
  mimeType_gte: String
  mimeType_contains: String
  mimeType_not_contains: String
  mimeType_starts_with: String
  mimeType_not_starts_with: String
  mimeType_ends_with: String
  mimeType_not_ends_with: String
  thumbnail: ThumbnailWhereInput
  folio: FolioWhereInput
  AND: [AssetWhereInput!]
  OR: [AssetWhereInput!]
  NOT: [AssetWhereInput!]
}

input AssetWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

type Folio {
  id: ID!
  name: String!
  desc: String!
  thumbnail: Thumbnail
  assets(where: AssetWhereInput, orderBy: AssetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Asset!]
  links(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link!]
  notes(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Note!]
  owner: User!
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  shares(where: ShareWhereInput, orderBy: ShareOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Share!]
}

type FolioConnection {
  pageInfo: PageInfo!
  edges: [FolioEdge]!
  aggregate: AggregateFolio!
}

input FolioCreateInput {
  name: String!
  desc: String!
  thumbnail: ThumbnailCreateOneInput
  assets: AssetCreateManyWithoutFolioInput
  links: LinkCreateManyWithoutFolioInput
  notes: NoteCreateManyWithoutFolioInput
  owner: UserCreateOneInput!
  tags: TagCreateManyWithoutFoliosInput
  shares: ShareCreateManyWithoutFoliosInput
}

input FolioCreateManyWithoutSharesInput {
  create: [FolioCreateWithoutSharesInput!]
  connect: [FolioWhereUniqueInput!]
}

input FolioCreateManyWithoutTagsInput {
  create: [FolioCreateWithoutTagsInput!]
  connect: [FolioWhereUniqueInput!]
}

input FolioCreateOneWithoutAssetsInput {
  create: FolioCreateWithoutAssetsInput
  connect: FolioWhereUniqueInput
}

input FolioCreateOneWithoutLinksInput {
  create: FolioCreateWithoutLinksInput
  connect: FolioWhereUniqueInput
}

input FolioCreateOneWithoutNotesInput {
  create: FolioCreateWithoutNotesInput
  connect: FolioWhereUniqueInput
}

input FolioCreateWithoutAssetsInput {
  name: String!
  desc: String!
  thumbnail: ThumbnailCreateOneInput
  links: LinkCreateManyWithoutFolioInput
  notes: NoteCreateManyWithoutFolioInput
  owner: UserCreateOneInput!
  tags: TagCreateManyWithoutFoliosInput
  shares: ShareCreateManyWithoutFoliosInput
}

input FolioCreateWithoutLinksInput {
  name: String!
  desc: String!
  thumbnail: ThumbnailCreateOneInput
  assets: AssetCreateManyWithoutFolioInput
  notes: NoteCreateManyWithoutFolioInput
  owner: UserCreateOneInput!
  tags: TagCreateManyWithoutFoliosInput
  shares: ShareCreateManyWithoutFoliosInput
}

input FolioCreateWithoutNotesInput {
  name: String!
  desc: String!
  thumbnail: ThumbnailCreateOneInput
  assets: AssetCreateManyWithoutFolioInput
  links: LinkCreateManyWithoutFolioInput
  owner: UserCreateOneInput!
  tags: TagCreateManyWithoutFoliosInput
  shares: ShareCreateManyWithoutFoliosInput
}

input FolioCreateWithoutSharesInput {
  name: String!
  desc: String!
  thumbnail: ThumbnailCreateOneInput
  assets: AssetCreateManyWithoutFolioInput
  links: LinkCreateManyWithoutFolioInput
  notes: NoteCreateManyWithoutFolioInput
  owner: UserCreateOneInput!
  tags: TagCreateManyWithoutFoliosInput
}

input FolioCreateWithoutTagsInput {
  name: String!
  desc: String!
  thumbnail: ThumbnailCreateOneInput
  assets: AssetCreateManyWithoutFolioInput
  links: LinkCreateManyWithoutFolioInput
  notes: NoteCreateManyWithoutFolioInput
  owner: UserCreateOneInput!
  shares: ShareCreateManyWithoutFoliosInput
}

type FolioEdge {
  node: Folio!
  cursor: String!
}

enum FolioOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  desc_ASC
  desc_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FolioPreviousValues {
  id: ID!
  name: String!
  desc: String!
}

input FolioScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  AND: [FolioScalarWhereInput!]
  OR: [FolioScalarWhereInput!]
  NOT: [FolioScalarWhereInput!]
}

type FolioSubscriptionPayload {
  mutation: MutationType!
  node: Folio
  updatedFields: [String!]
  previousValues: FolioPreviousValues
}

input FolioSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FolioWhereInput
  AND: [FolioSubscriptionWhereInput!]
  OR: [FolioSubscriptionWhereInput!]
  NOT: [FolioSubscriptionWhereInput!]
}

input FolioUpdateInput {
  name: String
  desc: String
  thumbnail: ThumbnailUpdateOneInput
  assets: AssetUpdateManyWithoutFolioInput
  links: LinkUpdateManyWithoutFolioInput
  notes: NoteUpdateManyWithoutFolioInput
  owner: UserUpdateOneRequiredInput
  tags: TagUpdateManyWithoutFoliosInput
  shares: ShareUpdateManyWithoutFoliosInput
}

input FolioUpdateManyDataInput {
  name: String
  desc: String
}

input FolioUpdateManyMutationInput {
  name: String
  desc: String
}

input FolioUpdateManyWithoutSharesInput {
  create: [FolioCreateWithoutSharesInput!]
  delete: [FolioWhereUniqueInput!]
  connect: [FolioWhereUniqueInput!]
  set: [FolioWhereUniqueInput!]
  disconnect: [FolioWhereUniqueInput!]
  update: [FolioUpdateWithWhereUniqueWithoutSharesInput!]
  upsert: [FolioUpsertWithWhereUniqueWithoutSharesInput!]
  deleteMany: [FolioScalarWhereInput!]
  updateMany: [FolioUpdateManyWithWhereNestedInput!]
}

input FolioUpdateManyWithoutTagsInput {
  create: [FolioCreateWithoutTagsInput!]
  delete: [FolioWhereUniqueInput!]
  connect: [FolioWhereUniqueInput!]
  set: [FolioWhereUniqueInput!]
  disconnect: [FolioWhereUniqueInput!]
  update: [FolioUpdateWithWhereUniqueWithoutTagsInput!]
  upsert: [FolioUpsertWithWhereUniqueWithoutTagsInput!]
  deleteMany: [FolioScalarWhereInput!]
  updateMany: [FolioUpdateManyWithWhereNestedInput!]
}

input FolioUpdateManyWithWhereNestedInput {
  where: FolioScalarWhereInput!
  data: FolioUpdateManyDataInput!
}

input FolioUpdateOneWithoutAssetsInput {
  create: FolioCreateWithoutAssetsInput
  update: FolioUpdateWithoutAssetsDataInput
  upsert: FolioUpsertWithoutAssetsInput
  delete: Boolean
  disconnect: Boolean
  connect: FolioWhereUniqueInput
}

input FolioUpdateOneWithoutLinksInput {
  create: FolioCreateWithoutLinksInput
  update: FolioUpdateWithoutLinksDataInput
  upsert: FolioUpsertWithoutLinksInput
  delete: Boolean
  disconnect: Boolean
  connect: FolioWhereUniqueInput
}

input FolioUpdateOneWithoutNotesInput {
  create: FolioCreateWithoutNotesInput
  update: FolioUpdateWithoutNotesDataInput
  upsert: FolioUpsertWithoutNotesInput
  delete: Boolean
  disconnect: Boolean
  connect: FolioWhereUniqueInput
}

input FolioUpdateWithoutAssetsDataInput {
  name: String
  desc: String
  thumbnail: ThumbnailUpdateOneInput
  links: LinkUpdateManyWithoutFolioInput
  notes: NoteUpdateManyWithoutFolioInput
  owner: UserUpdateOneRequiredInput
  tags: TagUpdateManyWithoutFoliosInput
  shares: ShareUpdateManyWithoutFoliosInput
}

input FolioUpdateWithoutLinksDataInput {
  name: String
  desc: String
  thumbnail: ThumbnailUpdateOneInput
  assets: AssetUpdateManyWithoutFolioInput
  notes: NoteUpdateManyWithoutFolioInput
  owner: UserUpdateOneRequiredInput
  tags: TagUpdateManyWithoutFoliosInput
  shares: ShareUpdateManyWithoutFoliosInput
}

input FolioUpdateWithoutNotesDataInput {
  name: String
  desc: String
  thumbnail: ThumbnailUpdateOneInput
  assets: AssetUpdateManyWithoutFolioInput
  links: LinkUpdateManyWithoutFolioInput
  owner: UserUpdateOneRequiredInput
  tags: TagUpdateManyWithoutFoliosInput
  shares: ShareUpdateManyWithoutFoliosInput
}

input FolioUpdateWithoutSharesDataInput {
  name: String
  desc: String
  thumbnail: ThumbnailUpdateOneInput
  assets: AssetUpdateManyWithoutFolioInput
  links: LinkUpdateManyWithoutFolioInput
  notes: NoteUpdateManyWithoutFolioInput
  owner: UserUpdateOneRequiredInput
  tags: TagUpdateManyWithoutFoliosInput
}

input FolioUpdateWithoutTagsDataInput {
  name: String
  desc: String
  thumbnail: ThumbnailUpdateOneInput
  assets: AssetUpdateManyWithoutFolioInput
  links: LinkUpdateManyWithoutFolioInput
  notes: NoteUpdateManyWithoutFolioInput
  owner: UserUpdateOneRequiredInput
  shares: ShareUpdateManyWithoutFoliosInput
}

input FolioUpdateWithWhereUniqueWithoutSharesInput {
  where: FolioWhereUniqueInput!
  data: FolioUpdateWithoutSharesDataInput!
}

input FolioUpdateWithWhereUniqueWithoutTagsInput {
  where: FolioWhereUniqueInput!
  data: FolioUpdateWithoutTagsDataInput!
}

input FolioUpsertWithoutAssetsInput {
  update: FolioUpdateWithoutAssetsDataInput!
  create: FolioCreateWithoutAssetsInput!
}

input FolioUpsertWithoutLinksInput {
  update: FolioUpdateWithoutLinksDataInput!
  create: FolioCreateWithoutLinksInput!
}

input FolioUpsertWithoutNotesInput {
  update: FolioUpdateWithoutNotesDataInput!
  create: FolioCreateWithoutNotesInput!
}

input FolioUpsertWithWhereUniqueWithoutSharesInput {
  where: FolioWhereUniqueInput!
  update: FolioUpdateWithoutSharesDataInput!
  create: FolioCreateWithoutSharesInput!
}

input FolioUpsertWithWhereUniqueWithoutTagsInput {
  where: FolioWhereUniqueInput!
  update: FolioUpdateWithoutTagsDataInput!
  create: FolioCreateWithoutTagsInput!
}

input FolioWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  thumbnail: ThumbnailWhereInput
  assets_every: AssetWhereInput
  assets_some: AssetWhereInput
  assets_none: AssetWhereInput
  links_every: LinkWhereInput
  links_some: LinkWhereInput
  links_none: LinkWhereInput
  notes_every: NoteWhereInput
  notes_some: NoteWhereInput
  notes_none: NoteWhereInput
  owner: UserWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  shares_every: ShareWhereInput
  shares_some: ShareWhereInput
  shares_none: ShareWhereInput
  AND: [FolioWhereInput!]
  OR: [FolioWhereInput!]
  NOT: [FolioWhereInput!]
}

input FolioWhereUniqueInput {
  id: ID
}

type Link {
  id: ID!
  name: String!
  desc: String
  url: String
  thumbnail: Thumbnail
  folio: Folio
}

type LinkConnection {
  pageInfo: PageInfo!
  edges: [LinkEdge]!
  aggregate: AggregateLink!
}

input LinkCreateInput {
  name: String!
  desc: String
  url: String
  thumbnail: ThumbnailCreateOneInput
  folio: FolioCreateOneWithoutLinksInput
}

input LinkCreateManyWithoutFolioInput {
  create: [LinkCreateWithoutFolioInput!]
  connect: [LinkWhereUniqueInput!]
}

input LinkCreateWithoutFolioInput {
  name: String!
  desc: String
  url: String
  thumbnail: ThumbnailCreateOneInput
}

type LinkEdge {
  node: Link!
  cursor: String!
}

enum LinkOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  desc_ASC
  desc_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LinkPreviousValues {
  id: ID!
  name: String!
  desc: String
  url: String
}

input LinkScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [LinkScalarWhereInput!]
  OR: [LinkScalarWhereInput!]
  NOT: [LinkScalarWhereInput!]
}

type LinkSubscriptionPayload {
  mutation: MutationType!
  node: Link
  updatedFields: [String!]
  previousValues: LinkPreviousValues
}

input LinkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LinkWhereInput
  AND: [LinkSubscriptionWhereInput!]
  OR: [LinkSubscriptionWhereInput!]
  NOT: [LinkSubscriptionWhereInput!]
}

input LinkUpdateInput {
  name: String
  desc: String
  url: String
  thumbnail: ThumbnailUpdateOneInput
  folio: FolioUpdateOneWithoutLinksInput
}

input LinkUpdateManyDataInput {
  name: String
  desc: String
  url: String
}

input LinkUpdateManyMutationInput {
  name: String
  desc: String
  url: String
}

input LinkUpdateManyWithoutFolioInput {
  create: [LinkCreateWithoutFolioInput!]
  delete: [LinkWhereUniqueInput!]
  connect: [LinkWhereUniqueInput!]
  set: [LinkWhereUniqueInput!]
  disconnect: [LinkWhereUniqueInput!]
  update: [LinkUpdateWithWhereUniqueWithoutFolioInput!]
  upsert: [LinkUpsertWithWhereUniqueWithoutFolioInput!]
  deleteMany: [LinkScalarWhereInput!]
  updateMany: [LinkUpdateManyWithWhereNestedInput!]
}

input LinkUpdateManyWithWhereNestedInput {
  where: LinkScalarWhereInput!
  data: LinkUpdateManyDataInput!
}

input LinkUpdateWithoutFolioDataInput {
  name: String
  desc: String
  url: String
  thumbnail: ThumbnailUpdateOneInput
}

input LinkUpdateWithWhereUniqueWithoutFolioInput {
  where: LinkWhereUniqueInput!
  data: LinkUpdateWithoutFolioDataInput!
}

input LinkUpsertWithWhereUniqueWithoutFolioInput {
  where: LinkWhereUniqueInput!
  update: LinkUpdateWithoutFolioDataInput!
  create: LinkCreateWithoutFolioInput!
}

input LinkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  thumbnail: ThumbnailWhereInput
  folio: FolioWhereInput
  AND: [LinkWhereInput!]
  OR: [LinkWhereInput!]
  NOT: [LinkWhereInput!]
}

input LinkWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createAsset(data: AssetCreateInput!): Asset!
  updateAsset(data: AssetUpdateInput!, where: AssetWhereUniqueInput!): Asset
  updateManyAssets(data: AssetUpdateManyMutationInput!, where: AssetWhereInput): BatchPayload!
  upsertAsset(where: AssetWhereUniqueInput!, create: AssetCreateInput!, update: AssetUpdateInput!): Asset!
  deleteAsset(where: AssetWhereUniqueInput!): Asset
  deleteManyAssets(where: AssetWhereInput): BatchPayload!
  createFolio(data: FolioCreateInput!): Folio!
  updateFolio(data: FolioUpdateInput!, where: FolioWhereUniqueInput!): Folio
  updateManyFolios(data: FolioUpdateManyMutationInput!, where: FolioWhereInput): BatchPayload!
  upsertFolio(where: FolioWhereUniqueInput!, create: FolioCreateInput!, update: FolioUpdateInput!): Folio!
  deleteFolio(where: FolioWhereUniqueInput!): Folio
  deleteManyFolios(where: FolioWhereInput): BatchPayload!
  createLink(data: LinkCreateInput!): Link!
  updateLink(data: LinkUpdateInput!, where: LinkWhereUniqueInput!): Link
  updateManyLinks(data: LinkUpdateManyMutationInput!, where: LinkWhereInput): BatchPayload!
  upsertLink(where: LinkWhereUniqueInput!, create: LinkCreateInput!, update: LinkUpdateInput!): Link!
  deleteLink(where: LinkWhereUniqueInput!): Link
  deleteManyLinks(where: LinkWhereInput): BatchPayload!
  createNote(data: NoteCreateInput!): Note!
  updateNote(data: NoteUpdateInput!, where: NoteWhereUniqueInput!): Note
  updateManyNotes(data: NoteUpdateManyMutationInput!, where: NoteWhereInput): BatchPayload!
  upsertNote(where: NoteWhereUniqueInput!, create: NoteCreateInput!, update: NoteUpdateInput!): Note!
  deleteNote(where: NoteWhereUniqueInput!): Note
  deleteManyNotes(where: NoteWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createShare(data: ShareCreateInput!): Share!
  updateShare(data: ShareUpdateInput!, where: ShareWhereUniqueInput!): Share
  upsertShare(where: ShareWhereUniqueInput!, create: ShareCreateInput!, update: ShareUpdateInput!): Share!
  deleteShare(where: ShareWhereUniqueInput!): Share
  deleteManyShares(where: ShareWhereInput): BatchPayload!
  createTag(data: TagCreateInput!): Tag!
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateManyTags(data: TagUpdateManyMutationInput!, where: TagWhereInput): BatchPayload!
  upsertTag(where: TagWhereUniqueInput!, create: TagCreateInput!, update: TagUpdateInput!): Tag!
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteManyTags(where: TagWhereInput): BatchPayload!
  createThumbnail(data: ThumbnailCreateInput!): Thumbnail!
  updateThumbnail(data: ThumbnailUpdateInput!, where: ThumbnailWhereUniqueInput!): Thumbnail
  updateManyThumbnails(data: ThumbnailUpdateManyMutationInput!, where: ThumbnailWhereInput): BatchPayload!
  upsertThumbnail(where: ThumbnailWhereUniqueInput!, create: ThumbnailCreateInput!, update: ThumbnailUpdateInput!): Thumbnail!
  deleteThumbnail(where: ThumbnailWhereUniqueInput!): Thumbnail
  deleteManyThumbnails(where: ThumbnailWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Note {
  id: ID!
  name: String!
  note: String
  thumbnail: Thumbnail
  folio: Folio
}

type NoteConnection {
  pageInfo: PageInfo!
  edges: [NoteEdge]!
  aggregate: AggregateNote!
}

input NoteCreateInput {
  name: String!
  note: String
  thumbnail: ThumbnailCreateOneInput
  folio: FolioCreateOneWithoutNotesInput
}

input NoteCreateManyWithoutFolioInput {
  create: [NoteCreateWithoutFolioInput!]
  connect: [NoteWhereUniqueInput!]
}

input NoteCreateWithoutFolioInput {
  name: String!
  note: String
  thumbnail: ThumbnailCreateOneInput
}

type NoteEdge {
  node: Note!
  cursor: String!
}

enum NoteOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  note_ASC
  note_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NotePreviousValues {
  id: ID!
  name: String!
  note: String
}

input NoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  AND: [NoteScalarWhereInput!]
  OR: [NoteScalarWhereInput!]
  NOT: [NoteScalarWhereInput!]
}

type NoteSubscriptionPayload {
  mutation: MutationType!
  node: Note
  updatedFields: [String!]
  previousValues: NotePreviousValues
}

input NoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NoteWhereInput
  AND: [NoteSubscriptionWhereInput!]
  OR: [NoteSubscriptionWhereInput!]
  NOT: [NoteSubscriptionWhereInput!]
}

input NoteUpdateInput {
  name: String
  note: String
  thumbnail: ThumbnailUpdateOneInput
  folio: FolioUpdateOneWithoutNotesInput
}

input NoteUpdateManyDataInput {
  name: String
  note: String
}

input NoteUpdateManyMutationInput {
  name: String
  note: String
}

input NoteUpdateManyWithoutFolioInput {
  create: [NoteCreateWithoutFolioInput!]
  delete: [NoteWhereUniqueInput!]
  connect: [NoteWhereUniqueInput!]
  set: [NoteWhereUniqueInput!]
  disconnect: [NoteWhereUniqueInput!]
  update: [NoteUpdateWithWhereUniqueWithoutFolioInput!]
  upsert: [NoteUpsertWithWhereUniqueWithoutFolioInput!]
  deleteMany: [NoteScalarWhereInput!]
  updateMany: [NoteUpdateManyWithWhereNestedInput!]
}

input NoteUpdateManyWithWhereNestedInput {
  where: NoteScalarWhereInput!
  data: NoteUpdateManyDataInput!
}

input NoteUpdateWithoutFolioDataInput {
  name: String
  note: String
  thumbnail: ThumbnailUpdateOneInput
}

input NoteUpdateWithWhereUniqueWithoutFolioInput {
  where: NoteWhereUniqueInput!
  data: NoteUpdateWithoutFolioDataInput!
}

input NoteUpsertWithWhereUniqueWithoutFolioInput {
  where: NoteWhereUniqueInput!
  update: NoteUpdateWithoutFolioDataInput!
  create: NoteCreateWithoutFolioInput!
}

input NoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  thumbnail: ThumbnailWhereInput
  folio: FolioWhereInput
  AND: [NoteWhereInput!]
  OR: [NoteWhereInput!]
  NOT: [NoteWhereInput!]
}

input NoteWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  title: String!
  published: Boolean!
  author: User
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  title: String!
  published: Boolean
  author: UserCreateOneWithoutPostsInput
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutAuthorInput {
  title: String!
  published: Boolean
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  published_ASC
  published_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
  published: Boolean!
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  published: Boolean
  published_not: Boolean
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  title: String
  published: Boolean
  author: UserUpdateOneWithoutPostsInput
}

input PostUpdateManyDataInput {
  title: String
  published: Boolean
}

input PostUpdateManyMutationInput {
  title: String
  published: Boolean
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateWithoutAuthorDataInput {
  title: String
  published: Boolean
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  published: Boolean
  published_not: Boolean
  author: UserWhereInput
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  asset(where: AssetWhereUniqueInput!): Asset
  assets(where: AssetWhereInput, orderBy: AssetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Asset]!
  assetsConnection(where: AssetWhereInput, orderBy: AssetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AssetConnection!
  folio(where: FolioWhereUniqueInput!): Folio
  folios(where: FolioWhereInput, orderBy: FolioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Folio]!
  foliosConnection(where: FolioWhereInput, orderBy: FolioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FolioConnection!
  link(where: LinkWhereUniqueInput!): Link
  links(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link]!
  linksConnection(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LinkConnection!
  note(where: NoteWhereUniqueInput!): Note
  notes(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Note]!
  notesConnection(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NoteConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  share(where: ShareWhereUniqueInput!): Share
  shares(where: ShareWhereInput, orderBy: ShareOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Share]!
  sharesConnection(where: ShareWhereInput, orderBy: ShareOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShareConnection!
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag]!
  tagsConnection(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagConnection!
  thumbnail(where: ThumbnailWhereUniqueInput!): Thumbnail
  thumbnails(where: ThumbnailWhereInput, orderBy: ThumbnailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Thumbnail]!
  thumbnailsConnection(where: ThumbnailWhereInput, orderBy: ThumbnailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ThumbnailConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Share {
  id: ID!
  owner: User!
  friend: User!
  thumbnail: Thumbnail
  folios(where: FolioWhereInput, orderBy: FolioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Folio!]
}

type ShareConnection {
  pageInfo: PageInfo!
  edges: [ShareEdge]!
  aggregate: AggregateShare!
}

input ShareCreateInput {
  owner: UserCreateOneInput!
  friend: UserCreateOneInput!
  thumbnail: ThumbnailCreateOneInput
  folios: FolioCreateManyWithoutSharesInput
}

input ShareCreateManyWithoutFoliosInput {
  create: [ShareCreateWithoutFoliosInput!]
  connect: [ShareWhereUniqueInput!]
}

input ShareCreateWithoutFoliosInput {
  owner: UserCreateOneInput!
  friend: UserCreateOneInput!
  thumbnail: ThumbnailCreateOneInput
}

type ShareEdge {
  node: Share!
  cursor: String!
}

enum ShareOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SharePreviousValues {
  id: ID!
}

input ShareScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [ShareScalarWhereInput!]
  OR: [ShareScalarWhereInput!]
  NOT: [ShareScalarWhereInput!]
}

type ShareSubscriptionPayload {
  mutation: MutationType!
  node: Share
  updatedFields: [String!]
  previousValues: SharePreviousValues
}

input ShareSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ShareWhereInput
  AND: [ShareSubscriptionWhereInput!]
  OR: [ShareSubscriptionWhereInput!]
  NOT: [ShareSubscriptionWhereInput!]
}

input ShareUpdateInput {
  owner: UserUpdateOneRequiredInput
  friend: UserUpdateOneRequiredInput
  thumbnail: ThumbnailUpdateOneInput
  folios: FolioUpdateManyWithoutSharesInput
}

input ShareUpdateManyWithoutFoliosInput {
  create: [ShareCreateWithoutFoliosInput!]
  delete: [ShareWhereUniqueInput!]
  connect: [ShareWhereUniqueInput!]
  set: [ShareWhereUniqueInput!]
  disconnect: [ShareWhereUniqueInput!]
  update: [ShareUpdateWithWhereUniqueWithoutFoliosInput!]
  upsert: [ShareUpsertWithWhereUniqueWithoutFoliosInput!]
  deleteMany: [ShareScalarWhereInput!]
}

input ShareUpdateWithoutFoliosDataInput {
  owner: UserUpdateOneRequiredInput
  friend: UserUpdateOneRequiredInput
  thumbnail: ThumbnailUpdateOneInput
}

input ShareUpdateWithWhereUniqueWithoutFoliosInput {
  where: ShareWhereUniqueInput!
  data: ShareUpdateWithoutFoliosDataInput!
}

input ShareUpsertWithWhereUniqueWithoutFoliosInput {
  where: ShareWhereUniqueInput!
  update: ShareUpdateWithoutFoliosDataInput!
  create: ShareCreateWithoutFoliosInput!
}

input ShareWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  owner: UserWhereInput
  friend: UserWhereInput
  thumbnail: ThumbnailWhereInput
  folios_every: FolioWhereInput
  folios_some: FolioWhereInput
  folios_none: FolioWhereInput
  AND: [ShareWhereInput!]
  OR: [ShareWhereInput!]
  NOT: [ShareWhereInput!]
}

input ShareWhereUniqueInput {
  id: ID
}

type Subscription {
  asset(where: AssetSubscriptionWhereInput): AssetSubscriptionPayload
  folio(where: FolioSubscriptionWhereInput): FolioSubscriptionPayload
  link(where: LinkSubscriptionWhereInput): LinkSubscriptionPayload
  note(where: NoteSubscriptionWhereInput): NoteSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  share(where: ShareSubscriptionWhereInput): ShareSubscriptionPayload
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
  thumbnail(where: ThumbnailSubscriptionWhereInput): ThumbnailSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Tag {
  id: ID!
  kind: TagType
  name: String!
  desc: String!
  thumbnail: Thumbnail
  folios(where: FolioWhereInput, orderBy: FolioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Folio!]
}

type TagConnection {
  pageInfo: PageInfo!
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreateInput {
  kind: TagType
  name: String!
  desc: String!
  thumbnail: ThumbnailCreateOneInput
  folios: FolioCreateManyWithoutTagsInput
}

input TagCreateManyWithoutFoliosInput {
  create: [TagCreateWithoutFoliosInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateWithoutFoliosInput {
  kind: TagType
  name: String!
  desc: String!
  thumbnail: ThumbnailCreateOneInput
}

type TagEdge {
  node: Tag!
  cursor: String!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
  kind_ASC
  kind_DESC
  name_ASC
  name_DESC
  desc_ASC
  desc_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TagPreviousValues {
  id: ID!
  kind: TagType
  name: String!
  desc: String!
}

input TagScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  kind: TagType
  kind_not: TagType
  kind_in: [TagType!]
  kind_not_in: [TagType!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  AND: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
}

type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

input TagSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TagWhereInput
  AND: [TagSubscriptionWhereInput!]
  OR: [TagSubscriptionWhereInput!]
  NOT: [TagSubscriptionWhereInput!]
}

enum TagType {
  Person
  Place
  Thing
  Folder
  Tag
  Category
}

input TagUpdateInput {
  kind: TagType
  name: String
  desc: String
  thumbnail: ThumbnailUpdateOneInput
  folios: FolioUpdateManyWithoutTagsInput
}

input TagUpdateManyDataInput {
  kind: TagType
  name: String
  desc: String
}

input TagUpdateManyMutationInput {
  kind: TagType
  name: String
  desc: String
}

input TagUpdateManyWithoutFoliosInput {
  create: [TagCreateWithoutFoliosInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutFoliosInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutFoliosInput!]
  deleteMany: [TagScalarWhereInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
}

input TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput!
  data: TagUpdateManyDataInput!
}

input TagUpdateWithoutFoliosDataInput {
  kind: TagType
  name: String
  desc: String
  thumbnail: ThumbnailUpdateOneInput
}

input TagUpdateWithWhereUniqueWithoutFoliosInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutFoliosDataInput!
}

input TagUpsertWithWhereUniqueWithoutFoliosInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutFoliosDataInput!
  create: TagCreateWithoutFoliosInput!
}

input TagWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  kind: TagType
  kind_not: TagType
  kind_in: [TagType!]
  kind_not_in: [TagType!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  thumbnail: ThumbnailWhereInput
  folios_every: FolioWhereInput
  folios_some: FolioWhereInput
  folios_none: FolioWhereInput
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
}

input TagWhereUniqueInput {
  id: ID
}

type Thumbnail {
  id: ID!
  name: String!
  path: String
}

type ThumbnailConnection {
  pageInfo: PageInfo!
  edges: [ThumbnailEdge]!
  aggregate: AggregateThumbnail!
}

input ThumbnailCreateInput {
  name: String!
  path: String
}

input ThumbnailCreateOneInput {
  create: ThumbnailCreateInput
  connect: ThumbnailWhereUniqueInput
}

type ThumbnailEdge {
  node: Thumbnail!
  cursor: String!
}

enum ThumbnailOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  path_ASC
  path_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ThumbnailPreviousValues {
  id: ID!
  name: String!
  path: String
}

type ThumbnailSubscriptionPayload {
  mutation: MutationType!
  node: Thumbnail
  updatedFields: [String!]
  previousValues: ThumbnailPreviousValues
}

input ThumbnailSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ThumbnailWhereInput
  AND: [ThumbnailSubscriptionWhereInput!]
  OR: [ThumbnailSubscriptionWhereInput!]
  NOT: [ThumbnailSubscriptionWhereInput!]
}

input ThumbnailUpdateDataInput {
  name: String
  path: String
}

input ThumbnailUpdateInput {
  name: String
  path: String
}

input ThumbnailUpdateManyMutationInput {
  name: String
  path: String
}

input ThumbnailUpdateOneInput {
  create: ThumbnailCreateInput
  update: ThumbnailUpdateDataInput
  upsert: ThumbnailUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ThumbnailWhereUniqueInput
}

input ThumbnailUpsertNestedInput {
  update: ThumbnailUpdateDataInput!
  create: ThumbnailCreateInput!
}

input ThumbnailWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  path: String
  path_not: String
  path_in: [String!]
  path_not_in: [String!]
  path_lt: String
  path_lte: String
  path_gt: String
  path_gte: String
  path_contains: String
  path_not_contains: String
  path_starts_with: String
  path_not_starts_with: String
  path_ends_with: String
  path_not_ends_with: String
  AND: [ThumbnailWhereInput!]
  OR: [ThumbnailWhereInput!]
  NOT: [ThumbnailWhereInput!]
}

input ThumbnailWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  email: String
  firstname: String!
  lastname: String!
  thumbnail: Thumbnail
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String
  firstname: String!
  lastname: String!
  thumbnail: ThumbnailCreateOneInput
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPostsInput {
  email: String
  firstname: String!
  lastname: String!
  thumbnail: ThumbnailCreateOneInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  firstname_ASC
  firstname_DESC
  lastname_ASC
  lastname_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String
  firstname: String!
  lastname: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  email: String
  firstname: String
  lastname: String
  thumbnail: ThumbnailUpdateOneInput
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateInput {
  email: String
  firstname: String
  lastname: String
  thumbnail: ThumbnailUpdateOneInput
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  email: String
  firstname: String
  lastname: String
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutPostsDataInput {
  email: String
  firstname: String
  lastname: String
  thumbnail: ThumbnailUpdateOneInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  thumbnail: ThumbnailWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`