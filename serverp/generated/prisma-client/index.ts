// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  asset: (where?: AssetWhereInput) => Promise<boolean>;
  folio: (where?: FolioWhereInput) => Promise<boolean>;
  link: (where?: LinkWhereInput) => Promise<boolean>;
  note: (where?: NoteWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  share: (where?: ShareWhereInput) => Promise<boolean>;
  tag: (where?: TagWhereInput) => Promise<boolean>;
  thumbnail: (where?: ThumbnailWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  asset: (where: AssetWhereUniqueInput) => AssetPromise;
  assets: (
    args?: {
      where?: AssetWhereInput;
      orderBy?: AssetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Asset>;
  assetsConnection: (
    args?: {
      where?: AssetWhereInput;
      orderBy?: AssetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AssetConnectionPromise;
  folio: (where: FolioWhereUniqueInput) => FolioPromise;
  folios: (
    args?: {
      where?: FolioWhereInput;
      orderBy?: FolioOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Folio>;
  foliosConnection: (
    args?: {
      where?: FolioWhereInput;
      orderBy?: FolioOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FolioConnectionPromise;
  link: (where: LinkWhereUniqueInput) => LinkPromise;
  links: (
    args?: {
      where?: LinkWhereInput;
      orderBy?: LinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Link>;
  linksConnection: (
    args?: {
      where?: LinkWhereInput;
      orderBy?: LinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LinkConnectionPromise;
  note: (where: NoteWhereUniqueInput) => NotePromise;
  notes: (
    args?: {
      where?: NoteWhereInput;
      orderBy?: NoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Note>;
  notesConnection: (
    args?: {
      where?: NoteWhereInput;
      orderBy?: NoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => NoteConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostPromise;
  posts: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Post>;
  postsConnection: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PostConnectionPromise;
  share: (where: ShareWhereUniqueInput) => SharePromise;
  shares: (
    args?: {
      where?: ShareWhereInput;
      orderBy?: ShareOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Share>;
  sharesConnection: (
    args?: {
      where?: ShareWhereInput;
      orderBy?: ShareOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ShareConnectionPromise;
  tag: (where: TagWhereUniqueInput) => TagPromise;
  tags: (
    args?: {
      where?: TagWhereInput;
      orderBy?: TagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Tag>;
  tagsConnection: (
    args?: {
      where?: TagWhereInput;
      orderBy?: TagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TagConnectionPromise;
  thumbnail: (where: ThumbnailWhereUniqueInput) => ThumbnailPromise;
  thumbnails: (
    args?: {
      where?: ThumbnailWhereInput;
      orderBy?: ThumbnailOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Thumbnail>;
  thumbnailsConnection: (
    args?: {
      where?: ThumbnailWhereInput;
      orderBy?: ThumbnailOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ThumbnailConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAsset: (data: AssetCreateInput) => AssetPromise;
  updateAsset: (
    args: { data: AssetUpdateInput; where: AssetWhereUniqueInput }
  ) => AssetPromise;
  updateManyAssets: (
    args: { data: AssetUpdateManyMutationInput; where?: AssetWhereInput }
  ) => BatchPayloadPromise;
  upsertAsset: (
    args: {
      where: AssetWhereUniqueInput;
      create: AssetCreateInput;
      update: AssetUpdateInput;
    }
  ) => AssetPromise;
  deleteAsset: (where: AssetWhereUniqueInput) => AssetPromise;
  deleteManyAssets: (where?: AssetWhereInput) => BatchPayloadPromise;
  createFolio: (data: FolioCreateInput) => FolioPromise;
  updateFolio: (
    args: { data: FolioUpdateInput; where: FolioWhereUniqueInput }
  ) => FolioPromise;
  updateManyFolios: (
    args: { data: FolioUpdateManyMutationInput; where?: FolioWhereInput }
  ) => BatchPayloadPromise;
  upsertFolio: (
    args: {
      where: FolioWhereUniqueInput;
      create: FolioCreateInput;
      update: FolioUpdateInput;
    }
  ) => FolioPromise;
  deleteFolio: (where: FolioWhereUniqueInput) => FolioPromise;
  deleteManyFolios: (where?: FolioWhereInput) => BatchPayloadPromise;
  createLink: (data: LinkCreateInput) => LinkPromise;
  updateLink: (
    args: { data: LinkUpdateInput; where: LinkWhereUniqueInput }
  ) => LinkPromise;
  updateManyLinks: (
    args: { data: LinkUpdateManyMutationInput; where?: LinkWhereInput }
  ) => BatchPayloadPromise;
  upsertLink: (
    args: {
      where: LinkWhereUniqueInput;
      create: LinkCreateInput;
      update: LinkUpdateInput;
    }
  ) => LinkPromise;
  deleteLink: (where: LinkWhereUniqueInput) => LinkPromise;
  deleteManyLinks: (where?: LinkWhereInput) => BatchPayloadPromise;
  createNote: (data: NoteCreateInput) => NotePromise;
  updateNote: (
    args: { data: NoteUpdateInput; where: NoteWhereUniqueInput }
  ) => NotePromise;
  updateManyNotes: (
    args: { data: NoteUpdateManyMutationInput; where?: NoteWhereInput }
  ) => BatchPayloadPromise;
  upsertNote: (
    args: {
      where: NoteWhereUniqueInput;
      create: NoteCreateInput;
      update: NoteUpdateInput;
    }
  ) => NotePromise;
  deleteNote: (where: NoteWhereUniqueInput) => NotePromise;
  deleteManyNotes: (where?: NoteWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (
    args: { data: PostUpdateInput; where: PostWhereUniqueInput }
  ) => PostPromise;
  updateManyPosts: (
    args: { data: PostUpdateManyMutationInput; where?: PostWhereInput }
  ) => BatchPayloadPromise;
  upsertPost: (
    args: {
      where: PostWhereUniqueInput;
      create: PostCreateInput;
      update: PostUpdateInput;
    }
  ) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createShare: (data: ShareCreateInput) => SharePromise;
  updateShare: (
    args: { data: ShareUpdateInput; where: ShareWhereUniqueInput }
  ) => SharePromise;
  upsertShare: (
    args: {
      where: ShareWhereUniqueInput;
      create: ShareCreateInput;
      update: ShareUpdateInput;
    }
  ) => SharePromise;
  deleteShare: (where: ShareWhereUniqueInput) => SharePromise;
  deleteManyShares: (where?: ShareWhereInput) => BatchPayloadPromise;
  createTag: (data: TagCreateInput) => TagPromise;
  updateTag: (
    args: { data: TagUpdateInput; where: TagWhereUniqueInput }
  ) => TagPromise;
  updateManyTags: (
    args: { data: TagUpdateManyMutationInput; where?: TagWhereInput }
  ) => BatchPayloadPromise;
  upsertTag: (
    args: {
      where: TagWhereUniqueInput;
      create: TagCreateInput;
      update: TagUpdateInput;
    }
  ) => TagPromise;
  deleteTag: (where: TagWhereUniqueInput) => TagPromise;
  deleteManyTags: (where?: TagWhereInput) => BatchPayloadPromise;
  createThumbnail: (data: ThumbnailCreateInput) => ThumbnailPromise;
  updateThumbnail: (
    args: { data: ThumbnailUpdateInput; where: ThumbnailWhereUniqueInput }
  ) => ThumbnailPromise;
  updateManyThumbnails: (
    args: {
      data: ThumbnailUpdateManyMutationInput;
      where?: ThumbnailWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertThumbnail: (
    args: {
      where: ThumbnailWhereUniqueInput;
      create: ThumbnailCreateInput;
      update: ThumbnailUpdateInput;
    }
  ) => ThumbnailPromise;
  deleteThumbnail: (where: ThumbnailWhereUniqueInput) => ThumbnailPromise;
  deleteManyThumbnails: (where?: ThumbnailWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  asset: (
    where?: AssetSubscriptionWhereInput
  ) => AssetSubscriptionPayloadSubscription;
  folio: (
    where?: FolioSubscriptionWhereInput
  ) => FolioSubscriptionPayloadSubscription;
  link: (
    where?: LinkSubscriptionWhereInput
  ) => LinkSubscriptionPayloadSubscription;
  note: (
    where?: NoteSubscriptionWhereInput
  ) => NoteSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  share: (
    where?: ShareSubscriptionWhereInput
  ) => ShareSubscriptionPayloadSubscription;
  tag: (
    where?: TagSubscriptionWhereInput
  ) => TagSubscriptionPayloadSubscription;
  thumbnail: (
    where?: ThumbnailSubscriptionWhereInput
  ) => ThumbnailSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TagOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "kind_ASC"
  | "kind_DESC"
  | "name_ASC"
  | "name_DESC"
  | "desc_ASC"
  | "desc_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TagType =
  | "Person"
  | "Place"
  | "Thing"
  | "Folder"
  | "Tag"
  | "Category";

export type AssetOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "uuid_ASC"
  | "uuid_DESC"
  | "path_ASC"
  | "path_DESC"
  | "note_ASC"
  | "note_DESC"
  | "mimeType_ASC"
  | "mimeType_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LinkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "desc_ASC"
  | "desc_DESC"
  | "url_ASC"
  | "url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type NoteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "note_ASC"
  | "note_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "published_ASC"
  | "published_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type FolioOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "desc_ASC"
  | "desc_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ShareOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ThumbnailOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "path_ASC"
  | "path_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "firstname_ASC"
  | "firstname_DESC"
  | "lastname_ASC"
  | "lastname_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutAuthorDataInput;
}

export type AssetWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface AssetUpdateInput {
  name?: String;
  uuid?: String;
  path?: String;
  note?: String;
  mimeType?: String;
  thumbnail?: ThumbnailUpdateOneInput;
  folio?: FolioUpdateOneWithoutAssetsInput;
}

export interface NoteUpdateManyMutationInput {
  name?: String;
  note?: String;
}

export interface ThumbnailUpdateOneInput {
  create?: ThumbnailCreateInput;
  update?: ThumbnailUpdateDataInput;
  upsert?: ThumbnailUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ThumbnailWhereUniqueInput;
}

export interface TagUpdateManyWithoutFoliosInput {
  create?: TagCreateWithoutFoliosInput[] | TagCreateWithoutFoliosInput;
  delete?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  connect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  set?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  disconnect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  update?:
    | TagUpdateWithWhereUniqueWithoutFoliosInput[]
    | TagUpdateWithWhereUniqueWithoutFoliosInput;
  upsert?:
    | TagUpsertWithWhereUniqueWithoutFoliosInput[]
    | TagUpsertWithWhereUniqueWithoutFoliosInput;
  deleteMany?: TagScalarWhereInput[] | TagScalarWhereInput;
  updateMany?:
    | TagUpdateManyWithWhereNestedInput[]
    | TagUpdateManyWithWhereNestedInput;
}

export interface ThumbnailUpdateDataInput {
  name?: String;
  path?: String;
}

export interface ShareWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  owner?: UserWhereInput;
  friend?: UserWhereInput;
  thumbnail?: ThumbnailWhereInput;
  folios_every?: FolioWhereInput;
  folios_some?: FolioWhereInput;
  folios_none?: FolioWhereInput;
  AND?: ShareWhereInput[] | ShareWhereInput;
  OR?: ShareWhereInput[] | ShareWhereInput;
  NOT?: ShareWhereInput[] | ShareWhereInput;
}

export interface ThumbnailUpsertNestedInput {
  update: ThumbnailUpdateDataInput;
  create: ThumbnailCreateInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface FolioUpdateOneWithoutAssetsInput {
  create?: FolioCreateWithoutAssetsInput;
  update?: FolioUpdateWithoutAssetsDataInput;
  upsert?: FolioUpsertWithoutAssetsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: FolioWhereUniqueInput;
}

export interface ThumbnailSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ThumbnailWhereInput;
  AND?: ThumbnailSubscriptionWhereInput[] | ThumbnailSubscriptionWhereInput;
  OR?: ThumbnailSubscriptionWhereInput[] | ThumbnailSubscriptionWhereInput;
  NOT?: ThumbnailSubscriptionWhereInput[] | ThumbnailSubscriptionWhereInput;
}

export interface FolioUpdateWithoutAssetsDataInput {
  name?: String;
  desc?: String;
  thumbnail?: ThumbnailUpdateOneInput;
  links?: LinkUpdateManyWithoutFolioInput;
  notes?: NoteUpdateManyWithoutFolioInput;
  owner?: UserUpdateOneRequiredInput;
  tags?: TagUpdateManyWithoutFoliosInput;
  shares?: ShareUpdateManyWithoutFoliosInput;
}

export interface TagSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TagWhereInput;
  AND?: TagSubscriptionWhereInput[] | TagSubscriptionWhereInput;
  OR?: TagSubscriptionWhereInput[] | TagSubscriptionWhereInput;
  NOT?: TagSubscriptionWhereInput[] | TagSubscriptionWhereInput;
}

export interface LinkUpdateManyWithoutFolioInput {
  create?: LinkCreateWithoutFolioInput[] | LinkCreateWithoutFolioInput;
  delete?: LinkWhereUniqueInput[] | LinkWhereUniqueInput;
  connect?: LinkWhereUniqueInput[] | LinkWhereUniqueInput;
  set?: LinkWhereUniqueInput[] | LinkWhereUniqueInput;
  disconnect?: LinkWhereUniqueInput[] | LinkWhereUniqueInput;
  update?:
    | LinkUpdateWithWhereUniqueWithoutFolioInput[]
    | LinkUpdateWithWhereUniqueWithoutFolioInput;
  upsert?:
    | LinkUpsertWithWhereUniqueWithoutFolioInput[]
    | LinkUpsertWithWhereUniqueWithoutFolioInput;
  deleteMany?: LinkScalarWhereInput[] | LinkScalarWhereInput;
  updateMany?:
    | LinkUpdateManyWithWhereNestedInput[]
    | LinkUpdateManyWithWhereNestedInput;
}

export interface FolioWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  desc?: String;
  desc_not?: String;
  desc_in?: String[] | String;
  desc_not_in?: String[] | String;
  desc_lt?: String;
  desc_lte?: String;
  desc_gt?: String;
  desc_gte?: String;
  desc_contains?: String;
  desc_not_contains?: String;
  desc_starts_with?: String;
  desc_not_starts_with?: String;
  desc_ends_with?: String;
  desc_not_ends_with?: String;
  thumbnail?: ThumbnailWhereInput;
  assets_every?: AssetWhereInput;
  assets_some?: AssetWhereInput;
  assets_none?: AssetWhereInput;
  links_every?: LinkWhereInput;
  links_some?: LinkWhereInput;
  links_none?: LinkWhereInput;
  notes_every?: NoteWhereInput;
  notes_some?: NoteWhereInput;
  notes_none?: NoteWhereInput;
  owner?: UserWhereInput;
  tags_every?: TagWhereInput;
  tags_some?: TagWhereInput;
  tags_none?: TagWhereInput;
  shares_every?: ShareWhereInput;
  shares_some?: ShareWhereInput;
  shares_none?: ShareWhereInput;
  AND?: FolioWhereInput[] | FolioWhereInput;
  OR?: FolioWhereInput[] | FolioWhereInput;
  NOT?: FolioWhereInput[] | FolioWhereInput;
}

export interface LinkUpdateWithWhereUniqueWithoutFolioInput {
  where: LinkWhereUniqueInput;
  data: LinkUpdateWithoutFolioDataInput;
}

export interface ThumbnailWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  path?: String;
  path_not?: String;
  path_in?: String[] | String;
  path_not_in?: String[] | String;
  path_lt?: String;
  path_lte?: String;
  path_gt?: String;
  path_gte?: String;
  path_contains?: String;
  path_not_contains?: String;
  path_starts_with?: String;
  path_not_starts_with?: String;
  path_ends_with?: String;
  path_not_ends_with?: String;
  AND?: ThumbnailWhereInput[] | ThumbnailWhereInput;
  OR?: ThumbnailWhereInput[] | ThumbnailWhereInput;
  NOT?: ThumbnailWhereInput[] | ThumbnailWhereInput;
}

export interface LinkUpdateWithoutFolioDataInput {
  name?: String;
  desc?: String;
  url?: String;
  thumbnail?: ThumbnailUpdateOneInput;
}

export interface AssetWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  uuid?: String;
  uuid_not?: String;
  uuid_in?: String[] | String;
  uuid_not_in?: String[] | String;
  uuid_lt?: String;
  uuid_lte?: String;
  uuid_gt?: String;
  uuid_gte?: String;
  uuid_contains?: String;
  uuid_not_contains?: String;
  uuid_starts_with?: String;
  uuid_not_starts_with?: String;
  uuid_ends_with?: String;
  uuid_not_ends_with?: String;
  path?: String;
  path_not?: String;
  path_in?: String[] | String;
  path_not_in?: String[] | String;
  path_lt?: String;
  path_lte?: String;
  path_gt?: String;
  path_gte?: String;
  path_contains?: String;
  path_not_contains?: String;
  path_starts_with?: String;
  path_not_starts_with?: String;
  path_ends_with?: String;
  path_not_ends_with?: String;
  note?: String;
  note_not?: String;
  note_in?: String[] | String;
  note_not_in?: String[] | String;
  note_lt?: String;
  note_lte?: String;
  note_gt?: String;
  note_gte?: String;
  note_contains?: String;
  note_not_contains?: String;
  note_starts_with?: String;
  note_not_starts_with?: String;
  note_ends_with?: String;
  note_not_ends_with?: String;
  mimeType?: String;
  mimeType_not?: String;
  mimeType_in?: String[] | String;
  mimeType_not_in?: String[] | String;
  mimeType_lt?: String;
  mimeType_lte?: String;
  mimeType_gt?: String;
  mimeType_gte?: String;
  mimeType_contains?: String;
  mimeType_not_contains?: String;
  mimeType_starts_with?: String;
  mimeType_not_starts_with?: String;
  mimeType_ends_with?: String;
  mimeType_not_ends_with?: String;
  thumbnail?: ThumbnailWhereInput;
  folio?: FolioWhereInput;
  AND?: AssetWhereInput[] | AssetWhereInput;
  OR?: AssetWhereInput[] | AssetWhereInput;
  NOT?: AssetWhereInput[] | AssetWhereInput;
}

export interface LinkUpsertWithWhereUniqueWithoutFolioInput {
  where: LinkWhereUniqueInput;
  update: LinkUpdateWithoutFolioDataInput;
  create: LinkCreateWithoutFolioInput;
}

export interface FolioSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: FolioWhereInput;
  AND?: FolioSubscriptionWhereInput[] | FolioSubscriptionWhereInput;
  OR?: FolioSubscriptionWhereInput[] | FolioSubscriptionWhereInput;
  NOT?: FolioSubscriptionWhereInput[] | FolioSubscriptionWhereInput;
}

export interface LinkScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  desc?: String;
  desc_not?: String;
  desc_in?: String[] | String;
  desc_not_in?: String[] | String;
  desc_lt?: String;
  desc_lte?: String;
  desc_gt?: String;
  desc_gte?: String;
  desc_contains?: String;
  desc_not_contains?: String;
  desc_starts_with?: String;
  desc_not_starts_with?: String;
  desc_ends_with?: String;
  desc_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: LinkScalarWhereInput[] | LinkScalarWhereInput;
  OR?: LinkScalarWhereInput[] | LinkScalarWhereInput;
  NOT?: LinkScalarWhereInput[] | LinkScalarWhereInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  firstname?: String;
  lastname?: String;
}

export interface LinkUpdateManyWithWhereNestedInput {
  where: LinkScalarWhereInput;
  data: LinkUpdateManyDataInput;
}

export interface ThumbnailUpdateManyMutationInput {
  name?: String;
  path?: String;
}

export interface LinkUpdateManyDataInput {
  name?: String;
  desc?: String;
  url?: String;
}

export interface ThumbnailUpdateInput {
  name?: String;
  path?: String;
}

export interface NoteUpdateManyWithoutFolioInput {
  create?: NoteCreateWithoutFolioInput[] | NoteCreateWithoutFolioInput;
  delete?: NoteWhereUniqueInput[] | NoteWhereUniqueInput;
  connect?: NoteWhereUniqueInput[] | NoteWhereUniqueInput;
  set?: NoteWhereUniqueInput[] | NoteWhereUniqueInput;
  disconnect?: NoteWhereUniqueInput[] | NoteWhereUniqueInput;
  update?:
    | NoteUpdateWithWhereUniqueWithoutFolioInput[]
    | NoteUpdateWithWhereUniqueWithoutFolioInput;
  upsert?:
    | NoteUpsertWithWhereUniqueWithoutFolioInput[]
    | NoteUpsertWithWhereUniqueWithoutFolioInput;
  deleteMany?: NoteScalarWhereInput[] | NoteScalarWhereInput;
  updateMany?:
    | NoteUpdateManyWithWhereNestedInput[]
    | NoteUpdateManyWithWhereNestedInput;
}

export interface FolioUpsertWithWhereUniqueWithoutTagsInput {
  where: FolioWhereUniqueInput;
  update: FolioUpdateWithoutTagsDataInput;
  create: FolioCreateWithoutTagsInput;
}

export interface NoteUpdateWithWhereUniqueWithoutFolioInput {
  where: NoteWhereUniqueInput;
  data: NoteUpdateWithoutFolioDataInput;
}

export interface FolioUpdateWithoutTagsDataInput {
  name?: String;
  desc?: String;
  thumbnail?: ThumbnailUpdateOneInput;
  assets?: AssetUpdateManyWithoutFolioInput;
  links?: LinkUpdateManyWithoutFolioInput;
  notes?: NoteUpdateManyWithoutFolioInput;
  owner?: UserUpdateOneRequiredInput;
  shares?: ShareUpdateManyWithoutFoliosInput;
}

export interface NoteUpdateWithoutFolioDataInput {
  name?: String;
  note?: String;
  thumbnail?: ThumbnailUpdateOneInput;
}

export interface FolioUpdateManyWithoutTagsInput {
  create?: FolioCreateWithoutTagsInput[] | FolioCreateWithoutTagsInput;
  delete?: FolioWhereUniqueInput[] | FolioWhereUniqueInput;
  connect?: FolioWhereUniqueInput[] | FolioWhereUniqueInput;
  set?: FolioWhereUniqueInput[] | FolioWhereUniqueInput;
  disconnect?: FolioWhereUniqueInput[] | FolioWhereUniqueInput;
  update?:
    | FolioUpdateWithWhereUniqueWithoutTagsInput[]
    | FolioUpdateWithWhereUniqueWithoutTagsInput;
  upsert?:
    | FolioUpsertWithWhereUniqueWithoutTagsInput[]
    | FolioUpsertWithWhereUniqueWithoutTagsInput;
  deleteMany?: FolioScalarWhereInput[] | FolioScalarWhereInput;
  updateMany?:
    | FolioUpdateManyWithWhereNestedInput[]
    | FolioUpdateManyWithWhereNestedInput;
}

export interface NoteUpsertWithWhereUniqueWithoutFolioInput {
  where: NoteWhereUniqueInput;
  update: NoteUpdateWithoutFolioDataInput;
  create: NoteCreateWithoutFolioInput;
}

export interface TagUpdateInput {
  kind?: TagType;
  name?: String;
  desc?: String;
  thumbnail?: ThumbnailUpdateOneInput;
  folios?: FolioUpdateManyWithoutTagsInput;
}

export interface NoteScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  note?: String;
  note_not?: String;
  note_in?: String[] | String;
  note_not_in?: String[] | String;
  note_lt?: String;
  note_lte?: String;
  note_gt?: String;
  note_gte?: String;
  note_contains?: String;
  note_not_contains?: String;
  note_starts_with?: String;
  note_not_starts_with?: String;
  note_ends_with?: String;
  note_not_ends_with?: String;
  AND?: NoteScalarWhereInput[] | NoteScalarWhereInput;
  OR?: NoteScalarWhereInput[] | NoteScalarWhereInput;
  NOT?: NoteScalarWhereInput[] | NoteScalarWhereInput;
}

export interface FolioCreateManyWithoutTagsInput {
  create?: FolioCreateWithoutTagsInput[] | FolioCreateWithoutTagsInput;
  connect?: FolioWhereUniqueInput[] | FolioWhereUniqueInput;
}

export interface NoteUpdateManyWithWhereNestedInput {
  where: NoteScalarWhereInput;
  data: NoteUpdateManyDataInput;
}

export interface TagCreateInput {
  kind?: TagType;
  name: String;
  desc: String;
  thumbnail?: ThumbnailCreateOneInput;
  folios?: FolioCreateManyWithoutTagsInput;
}

export interface NoteUpdateManyDataInput {
  name?: String;
  note?: String;
}

export interface FolioUpdateManyWithWhereNestedInput {
  where: FolioScalarWhereInput;
  data: FolioUpdateManyDataInput;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface FolioScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  desc?: String;
  desc_not?: String;
  desc_in?: String[] | String;
  desc_not_in?: String[] | String;
  desc_lt?: String;
  desc_lte?: String;
  desc_gt?: String;
  desc_gte?: String;
  desc_contains?: String;
  desc_not_contains?: String;
  desc_starts_with?: String;
  desc_not_starts_with?: String;
  desc_ends_with?: String;
  desc_not_ends_with?: String;
  AND?: FolioScalarWhereInput[] | FolioScalarWhereInput;
  OR?: FolioScalarWhereInput[] | FolioScalarWhereInput;
  NOT?: FolioScalarWhereInput[] | FolioScalarWhereInput;
}

export interface UserUpdateDataInput {
  email?: String;
  firstname?: String;
  lastname?: String;
  thumbnail?: ThumbnailUpdateOneInput;
  posts?: PostUpdateManyWithoutAuthorInput;
}

export interface FolioUpdateWithoutSharesDataInput {
  name?: String;
  desc?: String;
  thumbnail?: ThumbnailUpdateOneInput;
  assets?: AssetUpdateManyWithoutFolioInput;
  links?: LinkUpdateManyWithoutFolioInput;
  notes?: NoteUpdateManyWithoutFolioInput;
  owner?: UserUpdateOneRequiredInput;
  tags?: TagUpdateManyWithoutFoliosInput;
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  set?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?:
    | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    | PostUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    | PostUpsertWithWhereUniqueWithoutAuthorInput;
  deleteMany?: PostScalarWhereInput[] | PostScalarWhereInput;
  updateMany?:
    | PostUpdateManyWithWhereNestedInput[]
    | PostUpdateManyWithWhereNestedInput;
}

export interface FolioUpdateWithWhereUniqueWithoutSharesInput {
  where: FolioWhereUniqueInput;
  data: FolioUpdateWithoutSharesDataInput;
}

export interface UserCreateWithoutPostsInput {
  email?: String;
  firstname: String;
  lastname: String;
  thumbnail?: ThumbnailCreateOneInput;
}

export interface ShareUpdateInput {
  owner?: UserUpdateOneRequiredInput;
  friend?: UserUpdateOneRequiredInput;
  thumbnail?: ThumbnailUpdateOneInput;
  folios?: FolioUpdateManyWithoutSharesInput;
}

export interface PostUpdateWithoutAuthorDataInput {
  title?: String;
  published?: Boolean;
}

export interface FolioCreateWithoutSharesInput {
  name: String;
  desc: String;
  thumbnail?: ThumbnailCreateOneInput;
  assets?: AssetCreateManyWithoutFolioInput;
  links?: LinkCreateManyWithoutFolioInput;
  notes?: NoteCreateManyWithoutFolioInput;
  owner: UserCreateOneInput;
  tags?: TagCreateManyWithoutFoliosInput;
}

export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutAuthorDataInput;
  create: PostCreateWithoutAuthorInput;
}

export interface ShareCreateInput {
  owner: UserCreateOneInput;
  friend: UserCreateOneInput;
  thumbnail?: ThumbnailCreateOneInput;
  folios?: FolioCreateManyWithoutSharesInput;
}

export interface PostScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  published?: Boolean;
  published_not?: Boolean;
  AND?: PostScalarWhereInput[] | PostScalarWhereInput;
  OR?: PostScalarWhereInput[] | PostScalarWhereInput;
  NOT?: PostScalarWhereInput[] | PostScalarWhereInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface UserUpdateWithoutPostsDataInput {
  email?: String;
  firstname?: String;
  lastname?: String;
  thumbnail?: ThumbnailUpdateOneInput;
}

export interface PostUpdateManyDataInput {
  title?: String;
  published?: Boolean;
}

export interface PostUpdateInput {
  title?: String;
  published?: Boolean;
  author?: UserUpdateOneWithoutPostsInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface AssetCreateInput {
  name: String;
  uuid?: String;
  path?: String;
  note?: String;
  mimeType?: String;
  thumbnail?: ThumbnailCreateOneInput;
  folio?: FolioCreateOneWithoutAssetsInput;
}

export interface TagWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  kind?: TagType;
  kind_not?: TagType;
  kind_in?: TagType[] | TagType;
  kind_not_in?: TagType[] | TagType;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  desc?: String;
  desc_not?: String;
  desc_in?: String[] | String;
  desc_not_in?: String[] | String;
  desc_lt?: String;
  desc_lte?: String;
  desc_gt?: String;
  desc_gte?: String;
  desc_contains?: String;
  desc_not_contains?: String;
  desc_starts_with?: String;
  desc_not_starts_with?: String;
  desc_ends_with?: String;
  desc_not_ends_with?: String;
  thumbnail?: ThumbnailWhereInput;
  folios_every?: FolioWhereInput;
  folios_some?: FolioWhereInput;
  folios_none?: FolioWhereInput;
  AND?: TagWhereInput[] | TagWhereInput;
  OR?: TagWhereInput[] | TagWhereInput;
  NOT?: TagWhereInput[] | TagWhereInput;
}

export interface ThumbnailCreateInput {
  name: String;
  path?: String;
}

export interface TagUpdateWithWhereUniqueWithoutFoliosInput {
  where: TagWhereUniqueInput;
  data: TagUpdateWithoutFoliosDataInput;
}

export interface FolioCreateWithoutAssetsInput {
  name: String;
  desc: String;
  thumbnail?: ThumbnailCreateOneInput;
  links?: LinkCreateManyWithoutFolioInput;
  notes?: NoteCreateManyWithoutFolioInput;
  owner: UserCreateOneInput;
  tags?: TagCreateManyWithoutFoliosInput;
  shares?: ShareCreateManyWithoutFoliosInput;
}

export interface TagUpdateWithoutFoliosDataInput {
  kind?: TagType;
  name?: String;
  desc?: String;
  thumbnail?: ThumbnailUpdateOneInput;
}

export interface LinkCreateWithoutFolioInput {
  name: String;
  desc?: String;
  url?: String;
  thumbnail?: ThumbnailCreateOneInput;
}

export interface TagUpsertWithWhereUniqueWithoutFoliosInput {
  where: TagWhereUniqueInput;
  update: TagUpdateWithoutFoliosDataInput;
  create: TagCreateWithoutFoliosInput;
}

export interface NoteCreateWithoutFolioInput {
  name: String;
  note?: String;
  thumbnail?: ThumbnailCreateOneInput;
}

export interface TagScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  kind?: TagType;
  kind_not?: TagType;
  kind_in?: TagType[] | TagType;
  kind_not_in?: TagType[] | TagType;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  desc?: String;
  desc_not?: String;
  desc_in?: String[] | String;
  desc_not_in?: String[] | String;
  desc_lt?: String;
  desc_lte?: String;
  desc_gt?: String;
  desc_gte?: String;
  desc_contains?: String;
  desc_not_contains?: String;
  desc_starts_with?: String;
  desc_not_starts_with?: String;
  desc_ends_with?: String;
  desc_not_ends_with?: String;
  AND?: TagScalarWhereInput[] | TagScalarWhereInput;
  OR?: TagScalarWhereInput[] | TagScalarWhereInput;
  NOT?: TagScalarWhereInput[] | TagScalarWhereInput;
}

export interface UserCreateInput {
  email?: String;
  firstname: String;
  lastname: String;
  thumbnail?: ThumbnailCreateOneInput;
  posts?: PostCreateManyWithoutAuthorInput;
}

export interface TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput;
  data: TagUpdateManyDataInput;
}

export interface PostCreateWithoutAuthorInput {
  title: String;
  published?: Boolean;
}

export interface TagUpdateManyDataInput {
  kind?: TagType;
  name?: String;
  desc?: String;
}

export interface TagCreateWithoutFoliosInput {
  kind?: TagType;
  name: String;
  desc: String;
  thumbnail?: ThumbnailCreateOneInput;
}

export interface ShareUpdateManyWithoutFoliosInput {
  create?: ShareCreateWithoutFoliosInput[] | ShareCreateWithoutFoliosInput;
  delete?: ShareWhereUniqueInput[] | ShareWhereUniqueInput;
  connect?: ShareWhereUniqueInput[] | ShareWhereUniqueInput;
  set?: ShareWhereUniqueInput[] | ShareWhereUniqueInput;
  disconnect?: ShareWhereUniqueInput[] | ShareWhereUniqueInput;
  update?:
    | ShareUpdateWithWhereUniqueWithoutFoliosInput[]
    | ShareUpdateWithWhereUniqueWithoutFoliosInput;
  upsert?:
    | ShareUpsertWithWhereUniqueWithoutFoliosInput[]
    | ShareUpsertWithWhereUniqueWithoutFoliosInput;
  deleteMany?: ShareScalarWhereInput[] | ShareScalarWhereInput;
}

export interface ShareCreateWithoutFoliosInput {
  owner: UserCreateOneInput;
  friend: UserCreateOneInput;
  thumbnail?: ThumbnailCreateOneInput;
}

export interface ShareUpdateWithWhereUniqueWithoutFoliosInput {
  where: ShareWhereUniqueInput;
  data: ShareUpdateWithoutFoliosDataInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  firstname?: String;
  firstname_not?: String;
  firstname_in?: String[] | String;
  firstname_not_in?: String[] | String;
  firstname_lt?: String;
  firstname_lte?: String;
  firstname_gt?: String;
  firstname_gte?: String;
  firstname_contains?: String;
  firstname_not_contains?: String;
  firstname_starts_with?: String;
  firstname_not_starts_with?: String;
  firstname_ends_with?: String;
  firstname_not_ends_with?: String;
  lastname?: String;
  lastname_not?: String;
  lastname_in?: String[] | String;
  lastname_not_in?: String[] | String;
  lastname_lt?: String;
  lastname_lte?: String;
  lastname_gt?: String;
  lastname_gte?: String;
  lastname_contains?: String;
  lastname_not_contains?: String;
  lastname_starts_with?: String;
  lastname_not_starts_with?: String;
  lastname_ends_with?: String;
  lastname_not_ends_with?: String;
  thumbnail?: ThumbnailWhereInput;
  posts_every?: PostWhereInput;
  posts_some?: PostWhereInput;
  posts_none?: PostWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface ShareUpdateWithoutFoliosDataInput {
  owner?: UserUpdateOneRequiredInput;
  friend?: UserUpdateOneRequiredInput;
  thumbnail?: ThumbnailUpdateOneInput;
}

export interface LinkWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  desc?: String;
  desc_not?: String;
  desc_in?: String[] | String;
  desc_not_in?: String[] | String;
  desc_lt?: String;
  desc_lte?: String;
  desc_gt?: String;
  desc_gte?: String;
  desc_contains?: String;
  desc_not_contains?: String;
  desc_starts_with?: String;
  desc_not_starts_with?: String;
  desc_ends_with?: String;
  desc_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  thumbnail?: ThumbnailWhereInput;
  folio?: FolioWhereInput;
  AND?: LinkWhereInput[] | LinkWhereInput;
  OR?: LinkWhereInput[] | LinkWhereInput;
  NOT?: LinkWhereInput[] | LinkWhereInput;
}

export interface ShareUpsertWithWhereUniqueWithoutFoliosInput {
  where: ShareWhereUniqueInput;
  update: ShareUpdateWithoutFoliosDataInput;
  create: ShareCreateWithoutFoliosInput;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface ShareScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  AND?: ShareScalarWhereInput[] | ShareScalarWhereInput;
  OR?: ShareScalarWhereInput[] | ShareScalarWhereInput;
  NOT?: ShareScalarWhereInput[] | ShareScalarWhereInput;
}

export interface LinkSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LinkWhereInput;
  AND?: LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput;
  OR?: LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput;
  NOT?: LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput;
}

export interface FolioUpsertWithoutAssetsInput {
  update: FolioUpdateWithoutAssetsDataInput;
  create: FolioCreateWithoutAssetsInput;
}

export interface UserUpdateInput {
  email?: String;
  firstname?: String;
  lastname?: String;
  thumbnail?: ThumbnailUpdateOneInput;
  posts?: PostUpdateManyWithoutAuthorInput;
}

export interface AssetUpdateManyMutationInput {
  name?: String;
  uuid?: String;
  path?: String;
  note?: String;
  mimeType?: String;
}

export interface TagUpdateManyMutationInput {
  kind?: TagType;
  name?: String;
  desc?: String;
}

export interface UserCreateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface FolioUpdateWithWhereUniqueWithoutTagsInput {
  where: FolioWhereUniqueInput;
  data: FolioUpdateWithoutTagsDataInput;
}

export interface PostCreateInput {
  title: String;
  published?: Boolean;
  author?: UserCreateOneWithoutPostsInput;
}

export interface FolioCreateWithoutTagsInput {
  name: String;
  desc: String;
  thumbnail?: ThumbnailCreateOneInput;
  assets?: AssetCreateManyWithoutFolioInput;
  links?: LinkCreateManyWithoutFolioInput;
  notes?: NoteCreateManyWithoutFolioInput;
  owner: UserCreateOneInput;
  shares?: ShareCreateManyWithoutFoliosInput;
}

export interface FolioCreateInput {
  name: String;
  desc: String;
  thumbnail?: ThumbnailCreateOneInput;
  assets?: AssetCreateManyWithoutFolioInput;
  links?: LinkCreateManyWithoutFolioInput;
  notes?: NoteCreateManyWithoutFolioInput;
  owner: UserCreateOneInput;
  tags?: TagCreateManyWithoutFoliosInput;
  shares?: ShareCreateManyWithoutFoliosInput;
}

export interface FolioUpdateManyDataInput {
  name?: String;
  desc?: String;
}

export interface AssetCreateManyWithoutFolioInput {
  create?: AssetCreateWithoutFolioInput[] | AssetCreateWithoutFolioInput;
  connect?: AssetWhereUniqueInput[] | AssetWhereUniqueInput;
}

export interface FolioUpsertWithWhereUniqueWithoutSharesInput {
  where: FolioWhereUniqueInput;
  update: FolioUpdateWithoutSharesDataInput;
  create: FolioCreateWithoutSharesInput;
}

export interface AssetCreateWithoutFolioInput {
  name: String;
  uuid?: String;
  path?: String;
  note?: String;
  mimeType?: String;
  thumbnail?: ThumbnailCreateOneInput;
}

export interface FolioUpdateManyWithoutSharesInput {
  create?: FolioCreateWithoutSharesInput[] | FolioCreateWithoutSharesInput;
  delete?: FolioWhereUniqueInput[] | FolioWhereUniqueInput;
  connect?: FolioWhereUniqueInput[] | FolioWhereUniqueInput;
  set?: FolioWhereUniqueInput[] | FolioWhereUniqueInput;
  disconnect?: FolioWhereUniqueInput[] | FolioWhereUniqueInput;
  update?:
    | FolioUpdateWithWhereUniqueWithoutSharesInput[]
    | FolioUpdateWithWhereUniqueWithoutSharesInput;
  upsert?:
    | FolioUpsertWithWhereUniqueWithoutSharesInput[]
    | FolioUpsertWithWhereUniqueWithoutSharesInput;
  deleteMany?: FolioScalarWhereInput[] | FolioScalarWhereInput;
  updateMany?:
    | FolioUpdateManyWithWhereNestedInput[]
    | FolioUpdateManyWithWhereNestedInput;
}

export interface FolioUpdateInput {
  name?: String;
  desc?: String;
  thumbnail?: ThumbnailUpdateOneInput;
  assets?: AssetUpdateManyWithoutFolioInput;
  links?: LinkUpdateManyWithoutFolioInput;
  notes?: NoteUpdateManyWithoutFolioInput;
  owner?: UserUpdateOneRequiredInput;
  tags?: TagUpdateManyWithoutFoliosInput;
  shares?: ShareUpdateManyWithoutFoliosInput;
}

export interface FolioCreateManyWithoutSharesInput {
  create?: FolioCreateWithoutSharesInput[] | FolioCreateWithoutSharesInput;
  connect?: FolioWhereUniqueInput[] | FolioWhereUniqueInput;
}

export interface AssetUpdateManyWithoutFolioInput {
  create?: AssetCreateWithoutFolioInput[] | AssetCreateWithoutFolioInput;
  delete?: AssetWhereUniqueInput[] | AssetWhereUniqueInput;
  connect?: AssetWhereUniqueInput[] | AssetWhereUniqueInput;
  set?: AssetWhereUniqueInput[] | AssetWhereUniqueInput;
  disconnect?: AssetWhereUniqueInput[] | AssetWhereUniqueInput;
  update?:
    | AssetUpdateWithWhereUniqueWithoutFolioInput[]
    | AssetUpdateWithWhereUniqueWithoutFolioInput;
  upsert?:
    | AssetUpsertWithWhereUniqueWithoutFolioInput[]
    | AssetUpsertWithWhereUniqueWithoutFolioInput;
  deleteMany?: AssetScalarWhereInput[] | AssetScalarWhereInput;
  updateMany?:
    | AssetUpdateManyWithWhereNestedInput[]
    | AssetUpdateManyWithWhereNestedInput;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface AssetUpdateWithWhereUniqueWithoutFolioInput {
  where: AssetWhereUniqueInput;
  data: AssetUpdateWithoutFolioDataInput;
}

export interface FolioCreateOneWithoutAssetsInput {
  create?: FolioCreateWithoutAssetsInput;
  connect?: FolioWhereUniqueInput;
}

export interface AssetUpdateWithoutFolioDataInput {
  name?: String;
  uuid?: String;
  path?: String;
  note?: String;
  mimeType?: String;
  thumbnail?: ThumbnailUpdateOneInput;
}

export interface NoteCreateManyWithoutFolioInput {
  create?: NoteCreateWithoutFolioInput[] | NoteCreateWithoutFolioInput;
  connect?: NoteWhereUniqueInput[] | NoteWhereUniqueInput;
}

export interface AssetUpsertWithWhereUniqueWithoutFolioInput {
  where: AssetWhereUniqueInput;
  update: AssetUpdateWithoutFolioDataInput;
  create: AssetCreateWithoutFolioInput;
}

export interface PostCreateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface AssetScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  uuid?: String;
  uuid_not?: String;
  uuid_in?: String[] | String;
  uuid_not_in?: String[] | String;
  uuid_lt?: String;
  uuid_lte?: String;
  uuid_gt?: String;
  uuid_gte?: String;
  uuid_contains?: String;
  uuid_not_contains?: String;
  uuid_starts_with?: String;
  uuid_not_starts_with?: String;
  uuid_ends_with?: String;
  uuid_not_ends_with?: String;
  path?: String;
  path_not?: String;
  path_in?: String[] | String;
  path_not_in?: String[] | String;
  path_lt?: String;
  path_lte?: String;
  path_gt?: String;
  path_gte?: String;
  path_contains?: String;
  path_not_contains?: String;
  path_starts_with?: String;
  path_not_starts_with?: String;
  path_ends_with?: String;
  path_not_ends_with?: String;
  note?: String;
  note_not?: String;
  note_in?: String[] | String;
  note_not_in?: String[] | String;
  note_lt?: String;
  note_lte?: String;
  note_gt?: String;
  note_gte?: String;
  note_contains?: String;
  note_not_contains?: String;
  note_starts_with?: String;
  note_not_starts_with?: String;
  note_ends_with?: String;
  note_not_ends_with?: String;
  mimeType?: String;
  mimeType_not?: String;
  mimeType_in?: String[] | String;
  mimeType_not_in?: String[] | String;
  mimeType_lt?: String;
  mimeType_lte?: String;
  mimeType_gt?: String;
  mimeType_gte?: String;
  mimeType_contains?: String;
  mimeType_not_contains?: String;
  mimeType_starts_with?: String;
  mimeType_not_starts_with?: String;
  mimeType_ends_with?: String;
  mimeType_not_ends_with?: String;
  AND?: AssetScalarWhereInput[] | AssetScalarWhereInput;
  OR?: AssetScalarWhereInput[] | AssetScalarWhereInput;
  NOT?: AssetScalarWhereInput[] | AssetScalarWhereInput;
}

export interface ShareCreateManyWithoutFoliosInput {
  create?: ShareCreateWithoutFoliosInput[] | ShareCreateWithoutFoliosInput;
  connect?: ShareWhereUniqueInput[] | ShareWhereUniqueInput;
}

export interface AssetUpdateManyWithWhereNestedInput {
  where: AssetScalarWhereInput;
  data: AssetUpdateManyDataInput;
}

export interface NoteWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  note?: String;
  note_not?: String;
  note_in?: String[] | String;
  note_not_in?: String[] | String;
  note_lt?: String;
  note_lte?: String;
  note_gt?: String;
  note_gte?: String;
  note_contains?: String;
  note_not_contains?: String;
  note_starts_with?: String;
  note_not_starts_with?: String;
  note_ends_with?: String;
  note_not_ends_with?: String;
  thumbnail?: ThumbnailWhereInput;
  folio?: FolioWhereInput;
  AND?: NoteWhereInput[] | NoteWhereInput;
  OR?: NoteWhereInput[] | NoteWhereInput;
  NOT?: NoteWhereInput[] | NoteWhereInput;
}

export interface AssetUpdateManyDataInput {
  name?: String;
  uuid?: String;
  path?: String;
  note?: String;
  mimeType?: String;
}

export interface NoteSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: NoteWhereInput;
  AND?: NoteSubscriptionWhereInput[] | NoteSubscriptionWhereInput;
  OR?: NoteSubscriptionWhereInput[] | NoteSubscriptionWhereInput;
  NOT?: NoteSubscriptionWhereInput[] | NoteSubscriptionWhereInput;
}

export interface FolioUpdateManyMutationInput {
  name?: String;
  desc?: String;
}

export type FolioWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface LinkCreateInput {
  name: String;
  desc?: String;
  url?: String;
  thumbnail?: ThumbnailCreateOneInput;
  folio?: FolioCreateOneWithoutLinksInput;
}

export type NoteWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface FolioCreateOneWithoutLinksInput {
  create?: FolioCreateWithoutLinksInput;
  connect?: FolioWhereUniqueInput;
}

export type ShareWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface FolioCreateWithoutLinksInput {
  name: String;
  desc: String;
  thumbnail?: ThumbnailCreateOneInput;
  assets?: AssetCreateManyWithoutFolioInput;
  notes?: NoteCreateManyWithoutFolioInput;
  owner: UserCreateOneInput;
  tags?: TagCreateManyWithoutFoliosInput;
  shares?: ShareCreateManyWithoutFoliosInput;
}

export type ThumbnailWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface LinkUpdateInput {
  name?: String;
  desc?: String;
  url?: String;
  thumbnail?: ThumbnailUpdateOneInput;
  folio?: FolioUpdateOneWithoutLinksInput;
}

export interface UserUpdateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  update?: UserUpdateWithoutPostsDataInput;
  upsert?: UserUpsertWithoutPostsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface FolioUpdateOneWithoutLinksInput {
  create?: FolioCreateWithoutLinksInput;
  update?: FolioUpdateWithoutLinksDataInput;
  upsert?: FolioUpsertWithoutLinksInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: FolioWhereUniqueInput;
}

export interface LinkCreateManyWithoutFolioInput {
  create?: LinkCreateWithoutFolioInput[] | LinkCreateWithoutFolioInput;
  connect?: LinkWhereUniqueInput[] | LinkWhereUniqueInput;
}

export interface FolioUpdateWithoutLinksDataInput {
  name?: String;
  desc?: String;
  thumbnail?: ThumbnailUpdateOneInput;
  assets?: AssetUpdateManyWithoutFolioInput;
  notes?: NoteUpdateManyWithoutFolioInput;
  owner?: UserUpdateOneRequiredInput;
  tags?: TagUpdateManyWithoutFoliosInput;
  shares?: ShareUpdateManyWithoutFoliosInput;
}

export interface TagCreateManyWithoutFoliosInput {
  create?: TagCreateWithoutFoliosInput[] | TagCreateWithoutFoliosInput;
  connect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
}

export interface FolioUpsertWithoutLinksInput {
  update: FolioUpdateWithoutLinksDataInput;
  create: FolioCreateWithoutLinksInput;
}

export interface ShareSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ShareWhereInput;
  AND?: ShareSubscriptionWhereInput[] | ShareSubscriptionWhereInput;
  OR?: ShareSubscriptionWhereInput[] | ShareSubscriptionWhereInput;
  NOT?: ShareSubscriptionWhereInput[] | ShareSubscriptionWhereInput;
}

export interface LinkUpdateManyMutationInput {
  name?: String;
  desc?: String;
  url?: String;
}

export type LinkWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface NoteCreateInput {
  name: String;
  note?: String;
  thumbnail?: ThumbnailCreateOneInput;
  folio?: FolioCreateOneWithoutNotesInput;
}

export type TagWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface FolioCreateOneWithoutNotesInput {
  create?: FolioCreateWithoutNotesInput;
  connect?: FolioWhereUniqueInput;
}

export interface ThumbnailCreateOneInput {
  create?: ThumbnailCreateInput;
  connect?: ThumbnailWhereUniqueInput;
}

export interface FolioCreateWithoutNotesInput {
  name: String;
  desc: String;
  thumbnail?: ThumbnailCreateOneInput;
  assets?: AssetCreateManyWithoutFolioInput;
  links?: LinkCreateManyWithoutFolioInput;
  owner: UserCreateOneInput;
  tags?: TagCreateManyWithoutFoliosInput;
  shares?: ShareCreateManyWithoutFoliosInput;
}

export interface PostWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  published?: Boolean;
  published_not?: Boolean;
  author?: UserWhereInput;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export interface FolioUpsertWithoutNotesInput {
  update: FolioUpdateWithoutNotesDataInput;
  create: FolioCreateWithoutNotesInput;
}

export interface FolioUpdateWithoutNotesDataInput {
  name?: String;
  desc?: String;
  thumbnail?: ThumbnailUpdateOneInput;
  assets?: AssetUpdateManyWithoutFolioInput;
  links?: LinkUpdateManyWithoutFolioInput;
  owner?: UserUpdateOneRequiredInput;
  tags?: TagUpdateManyWithoutFoliosInput;
  shares?: ShareUpdateManyWithoutFoliosInput;
}

export interface FolioUpdateOneWithoutNotesInput {
  create?: FolioCreateWithoutNotesInput;
  update?: FolioUpdateWithoutNotesDataInput;
  upsert?: FolioUpsertWithoutNotesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: FolioWhereUniqueInput;
}

export interface NoteUpdateInput {
  name?: String;
  note?: String;
  thumbnail?: ThumbnailUpdateOneInput;
  folio?: FolioUpdateOneWithoutNotesInput;
}

export interface AssetSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AssetWhereInput;
  AND?: AssetSubscriptionWhereInput[] | AssetSubscriptionWhereInput;
  OR?: AssetSubscriptionWhereInput[] | AssetSubscriptionWhereInput;
  NOT?: AssetSubscriptionWhereInput[] | AssetSubscriptionWhereInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface PostUpdateManyMutationInput {
  title?: String;
  published?: Boolean;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email?: String;
  firstname: String;
  lastname: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
}

export interface FolioConnection {
  pageInfo: PageInfo;
  edges: FolioEdge[];
}

export interface FolioConnectionPromise
  extends Promise<FolioConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FolioEdge>>() => T;
  aggregate: <T = AggregateFolioPromise>() => T;
}

export interface FolioConnectionSubscription
  extends Promise<AsyncIterator<FolioConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FolioEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFolioSubscription>() => T;
}

export interface ThumbnailSubscriptionPayload {
  mutation: MutationType;
  node: Thumbnail;
  updatedFields: String[];
  previousValues: ThumbnailPreviousValues;
}

export interface ThumbnailSubscriptionPayloadPromise
  extends Promise<ThumbnailSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ThumbnailPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ThumbnailPreviousValuesPromise>() => T;
}

export interface ThumbnailSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ThumbnailSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ThumbnailSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ThumbnailPreviousValuesSubscription>() => T;
}

export interface AggregateAsset {
  count: Int;
}

export interface AggregateAssetPromise
  extends Promise<AggregateAsset>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAssetSubscription
  extends Promise<AsyncIterator<AggregateAsset>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AssetEdge {
  node: Asset;
  cursor: String;
}

export interface AssetEdgePromise extends Promise<AssetEdge>, Fragmentable {
  node: <T = AssetPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AssetEdgeSubscription
  extends Promise<AsyncIterator<AssetEdge>>,
    Fragmentable {
  node: <T = AssetSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AssetConnection {
  pageInfo: PageInfo;
  edges: AssetEdge[];
}

export interface AssetConnectionPromise
  extends Promise<AssetConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AssetEdge>>() => T;
  aggregate: <T = AggregateAssetPromise>() => T;
}

export interface AssetConnectionSubscription
  extends Promise<AsyncIterator<AssetConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AssetEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAssetSubscription>() => T;
}

export interface AggregateThumbnail {
  count: Int;
}

export interface AggregateThumbnailPromise
  extends Promise<AggregateThumbnail>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateThumbnailSubscription
  extends Promise<AsyncIterator<AggregateThumbnail>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Asset {
  id: ID_Output;
  name: String;
  uuid?: String;
  path?: String;
  note?: String;
  mimeType?: String;
}

export interface AssetPromise extends Promise<Asset>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  uuid: () => Promise<String>;
  path: () => Promise<String>;
  note: () => Promise<String>;
  mimeType: () => Promise<String>;
  thumbnail: <T = ThumbnailPromise>() => T;
  folio: <T = FolioPromise>() => T;
}

export interface AssetSubscription
  extends Promise<AsyncIterator<Asset>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  uuid: () => Promise<AsyncIterator<String>>;
  path: () => Promise<AsyncIterator<String>>;
  note: () => Promise<AsyncIterator<String>>;
  mimeType: () => Promise<AsyncIterator<String>>;
  thumbnail: <T = ThumbnailSubscription>() => T;
  folio: <T = FolioSubscription>() => T;
}

export interface ThumbnailConnection {
  pageInfo: PageInfo;
  edges: ThumbnailEdge[];
}

export interface ThumbnailConnectionPromise
  extends Promise<ThumbnailConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ThumbnailEdge>>() => T;
  aggregate: <T = AggregateThumbnailPromise>() => T;
}

export interface ThumbnailConnectionSubscription
  extends Promise<AsyncIterator<ThumbnailConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ThumbnailEdgeSubscription>>>() => T;
  aggregate: <T = AggregateThumbnailSubscription>() => T;
}

export interface AssetSubscriptionPayload {
  mutation: MutationType;
  node: Asset;
  updatedFields: String[];
  previousValues: AssetPreviousValues;
}

export interface AssetSubscriptionPayloadPromise
  extends Promise<AssetSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AssetPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AssetPreviousValuesPromise>() => T;
}

export interface AssetSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AssetSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AssetSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AssetPreviousValuesSubscription>() => T;
}

export interface AggregateTag {
  count: Int;
}

export interface AggregateTagPromise
  extends Promise<AggregateTag>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTagSubscription
  extends Promise<AsyncIterator<AggregateTag>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AssetPreviousValues {
  id: ID_Output;
  name: String;
  uuid?: String;
  path?: String;
  note?: String;
  mimeType?: String;
}

export interface AssetPreviousValuesPromise
  extends Promise<AssetPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  uuid: () => Promise<String>;
  path: () => Promise<String>;
  note: () => Promise<String>;
  mimeType: () => Promise<String>;
}

export interface AssetPreviousValuesSubscription
  extends Promise<AsyncIterator<AssetPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  uuid: () => Promise<AsyncIterator<String>>;
  path: () => Promise<AsyncIterator<String>>;
  note: () => Promise<AsyncIterator<String>>;
  mimeType: () => Promise<AsyncIterator<String>>;
}

export interface TagConnection {
  pageInfo: PageInfo;
  edges: TagEdge[];
}

export interface TagConnectionPromise
  extends Promise<TagConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TagEdge>>() => T;
  aggregate: <T = AggregateTagPromise>() => T;
}

export interface TagConnectionSubscription
  extends Promise<AsyncIterator<TagConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TagEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTagSubscription>() => T;
}

export interface Share {
  id: ID_Output;
}

export interface SharePromise extends Promise<Share>, Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  friend: <T = UserPromise>() => T;
  thumbnail: <T = ThumbnailPromise>() => T;
  folios: <T = FragmentableArray<Folio>>(
    args?: {
      where?: FolioWhereInput;
      orderBy?: FolioOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ShareSubscription
  extends Promise<AsyncIterator<Share>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  owner: <T = UserSubscription>() => T;
  friend: <T = UserSubscription>() => T;
  thumbnail: <T = ThumbnailSubscription>() => T;
  folios: <T = Promise<AsyncIterator<FolioSubscription>>>(
    args?: {
      where?: FolioWhereInput;
      orderBy?: FolioOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ShareEdge {
  node: Share;
  cursor: String;
}

export interface ShareEdgePromise extends Promise<ShareEdge>, Fragmentable {
  node: <T = SharePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ShareEdgeSubscription
  extends Promise<AsyncIterator<ShareEdge>>,
    Fragmentable {
  node: <T = ShareSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface FolioSubscriptionPayload {
  mutation: MutationType;
  node: Folio;
  updatedFields: String[];
  previousValues: FolioPreviousValues;
}

export interface FolioSubscriptionPayloadPromise
  extends Promise<FolioSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FolioPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FolioPreviousValuesPromise>() => T;
}

export interface FolioSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FolioSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FolioSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FolioPreviousValuesSubscription>() => T;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FolioPreviousValues {
  id: ID_Output;
  name: String;
  desc: String;
}

export interface FolioPreviousValuesPromise
  extends Promise<FolioPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  desc: () => Promise<String>;
}

export interface FolioPreviousValuesSubscription
  extends Promise<AsyncIterator<FolioPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  desc: () => Promise<AsyncIterator<String>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface Folio {
  id: ID_Output;
  name: String;
  desc: String;
}

export interface FolioPromise extends Promise<Folio>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  desc: () => Promise<String>;
  thumbnail: <T = ThumbnailPromise>() => T;
  assets: <T = FragmentableArray<Asset>>(
    args?: {
      where?: AssetWhereInput;
      orderBy?: AssetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  links: <T = FragmentableArray<Link>>(
    args?: {
      where?: LinkWhereInput;
      orderBy?: LinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  notes: <T = FragmentableArray<Note>>(
    args?: {
      where?: NoteWhereInput;
      orderBy?: NoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  owner: <T = UserPromise>() => T;
  tags: <T = FragmentableArray<Tag>>(
    args?: {
      where?: TagWhereInput;
      orderBy?: TagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  shares: <T = FragmentableArray<Share>>(
    args?: {
      where?: ShareWhereInput;
      orderBy?: ShareOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface FolioSubscription
  extends Promise<AsyncIterator<Folio>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  desc: () => Promise<AsyncIterator<String>>;
  thumbnail: <T = ThumbnailSubscription>() => T;
  assets: <T = Promise<AsyncIterator<AssetSubscription>>>(
    args?: {
      where?: AssetWhereInput;
      orderBy?: AssetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  links: <T = Promise<AsyncIterator<LinkSubscription>>>(
    args?: {
      where?: LinkWhereInput;
      orderBy?: LinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  notes: <T = Promise<AsyncIterator<NoteSubscription>>>(
    args?: {
      where?: NoteWhereInput;
      orderBy?: NoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  owner: <T = UserSubscription>() => T;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(
    args?: {
      where?: TagWhereInput;
      orderBy?: TagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  shares: <T = Promise<AsyncIterator<ShareSubscription>>>(
    args?: {
      where?: ShareWhereInput;
      orderBy?: ShareOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface NoteEdge {
  node: Note;
  cursor: String;
}

export interface NoteEdgePromise extends Promise<NoteEdge>, Fragmentable {
  node: <T = NotePromise>() => T;
  cursor: () => Promise<String>;
}

export interface NoteEdgeSubscription
  extends Promise<AsyncIterator<NoteEdge>>,
    Fragmentable {
  node: <T = NoteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LinkSubscriptionPayload {
  mutation: MutationType;
  node: Link;
  updatedFields: String[];
  previousValues: LinkPreviousValues;
}

export interface LinkSubscriptionPayloadPromise
  extends Promise<LinkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LinkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LinkPreviousValuesPromise>() => T;
}

export interface LinkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LinkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LinkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LinkPreviousValuesSubscription>() => T;
}

export interface AggregateLink {
  count: Int;
}

export interface AggregateLinkPromise
  extends Promise<AggregateLink>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLinkSubscription
  extends Promise<AsyncIterator<AggregateLink>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LinkPreviousValues {
  id: ID_Output;
  name: String;
  desc?: String;
  url?: String;
}

export interface LinkPreviousValuesPromise
  extends Promise<LinkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  desc: () => Promise<String>;
  url: () => Promise<String>;
}

export interface LinkPreviousValuesSubscription
  extends Promise<AsyncIterator<LinkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  desc: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface LinkConnection {
  pageInfo: PageInfo;
  edges: LinkEdge[];
}

export interface LinkConnectionPromise
  extends Promise<LinkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LinkEdge>>() => T;
  aggregate: <T = AggregateLinkPromise>() => T;
}

export interface LinkConnectionSubscription
  extends Promise<AsyncIterator<LinkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LinkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLinkSubscription>() => T;
}

export interface Tag {
  id: ID_Output;
  kind?: TagType;
  name: String;
  desc: String;
}

export interface TagPromise extends Promise<Tag>, Fragmentable {
  id: () => Promise<ID_Output>;
  kind: () => Promise<TagType>;
  name: () => Promise<String>;
  desc: () => Promise<String>;
  thumbnail: <T = ThumbnailPromise>() => T;
  folios: <T = FragmentableArray<Folio>>(
    args?: {
      where?: FolioWhereInput;
      orderBy?: FolioOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface TagSubscription
  extends Promise<AsyncIterator<Tag>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  kind: () => Promise<AsyncIterator<TagType>>;
  name: () => Promise<AsyncIterator<String>>;
  desc: () => Promise<AsyncIterator<String>>;
  thumbnail: <T = ThumbnailSubscription>() => T;
  folios: <T = Promise<AsyncIterator<FolioSubscription>>>(
    args?: {
      where?: FolioWhereInput;
      orderBy?: FolioOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface FolioEdge {
  node: Folio;
  cursor: String;
}

export interface FolioEdgePromise extends Promise<FolioEdge>, Fragmentable {
  node: <T = FolioPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FolioEdgeSubscription
  extends Promise<AsyncIterator<FolioEdge>>,
    Fragmentable {
  node: <T = FolioSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface NoteSubscriptionPayload {
  mutation: MutationType;
  node: Note;
  updatedFields: String[];
  previousValues: NotePreviousValues;
}

export interface NoteSubscriptionPayloadPromise
  extends Promise<NoteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NotePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NotePreviousValuesPromise>() => T;
}

export interface NoteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NoteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NoteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NotePreviousValuesSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface NotePreviousValues {
  id: ID_Output;
  name: String;
  note?: String;
}

export interface NotePreviousValuesPromise
  extends Promise<NotePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  note: () => Promise<String>;
}

export interface NotePreviousValuesSubscription
  extends Promise<AsyncIterator<NotePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  note: () => Promise<AsyncIterator<String>>;
}

export interface ThumbnailEdge {
  node: Thumbnail;
  cursor: String;
}

export interface ThumbnailEdgePromise
  extends Promise<ThumbnailEdge>,
    Fragmentable {
  node: <T = ThumbnailPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ThumbnailEdgeSubscription
  extends Promise<AsyncIterator<ThumbnailEdge>>,
    Fragmentable {
  node: <T = ThumbnailSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Post {
  id: ID_Output;
  title: String;
  published: Boolean;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  published: () => Promise<Boolean>;
  author: <T = UserPromise>() => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  author: <T = UserSubscription>() => T;
}

export interface TagEdge {
  node: Tag;
  cursor: String;
}

export interface TagEdgePromise extends Promise<TagEdge>, Fragmentable {
  node: <T = TagPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TagEdgeSubscription
  extends Promise<AsyncIterator<TagEdge>>,
    Fragmentable {
  node: <T = TagSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface ShareConnection {
  pageInfo: PageInfo;
  edges: ShareEdge[];
}

export interface ShareConnectionPromise
  extends Promise<ShareConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ShareEdge>>() => T;
  aggregate: <T = AggregateSharePromise>() => T;
}

export interface ShareConnectionSubscription
  extends Promise<AsyncIterator<ShareConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ShareEdgeSubscription>>>() => T;
  aggregate: <T = AggregateShareSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  title: String;
  published: Boolean;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  published: () => Promise<Boolean>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
}

export interface AggregateNote {
  count: Int;
}

export interface AggregateNotePromise
  extends Promise<AggregateNote>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNoteSubscription
  extends Promise<AsyncIterator<AggregateNote>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  email?: String;
  firstname: String;
  lastname: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  thumbnail: <T = ThumbnailPromise>() => T;
  posts: <T = FragmentableArray<Post>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  thumbnail: <T = ThumbnailSubscription>() => T;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface LinkEdge {
  node: Link;
  cursor: String;
}

export interface LinkEdgePromise extends Promise<LinkEdge>, Fragmentable {
  node: <T = LinkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LinkEdgeSubscription
  extends Promise<AsyncIterator<LinkEdge>>,
    Fragmentable {
  node: <T = LinkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ShareSubscriptionPayload {
  mutation: MutationType;
  node: Share;
  updatedFields: String[];
  previousValues: SharePreviousValues;
}

export interface ShareSubscriptionPayloadPromise
  extends Promise<ShareSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SharePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SharePreviousValuesPromise>() => T;
}

export interface ShareSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ShareSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ShareSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SharePreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface SharePreviousValues {
  id: ID_Output;
}

export interface SharePreviousValuesPromise
  extends Promise<SharePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface SharePreviousValuesSubscription
  extends Promise<AsyncIterator<SharePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface Thumbnail {
  id: ID_Output;
  name: String;
  path?: String;
}

export interface ThumbnailPromise extends Promise<Thumbnail>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  path: () => Promise<String>;
}

export interface ThumbnailSubscription
  extends Promise<AsyncIterator<Thumbnail>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  path: () => Promise<AsyncIterator<String>>;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Link {
  id: ID_Output;
  name: String;
  desc?: String;
  url?: String;
}

export interface LinkPromise extends Promise<Link>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  desc: () => Promise<String>;
  url: () => Promise<String>;
  thumbnail: <T = ThumbnailPromise>() => T;
  folio: <T = FolioPromise>() => T;
}

export interface LinkSubscription
  extends Promise<AsyncIterator<Link>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  desc: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  thumbnail: <T = ThumbnailSubscription>() => T;
  folio: <T = FolioSubscription>() => T;
}

export interface TagPreviousValues {
  id: ID_Output;
  kind?: TagType;
  name: String;
  desc: String;
}

export interface TagPreviousValuesPromise
  extends Promise<TagPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  kind: () => Promise<TagType>;
  name: () => Promise<String>;
  desc: () => Promise<String>;
}

export interface TagPreviousValuesSubscription
  extends Promise<AsyncIterator<TagPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  kind: () => Promise<AsyncIterator<TagType>>;
  name: () => Promise<AsyncIterator<String>>;
  desc: () => Promise<AsyncIterator<String>>;
}

export interface TagSubscriptionPayload {
  mutation: MutationType;
  node: Tag;
  updatedFields: String[];
  previousValues: TagPreviousValues;
}

export interface TagSubscriptionPayloadPromise
  extends Promise<TagSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TagPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TagPreviousValuesPromise>() => T;
}

export interface TagSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TagSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TagSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TagPreviousValuesSubscription>() => T;
}

export interface Note {
  id: ID_Output;
  name: String;
  note?: String;
}

export interface NotePromise extends Promise<Note>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  note: () => Promise<String>;
  thumbnail: <T = ThumbnailPromise>() => T;
  folio: <T = FolioPromise>() => T;
}

export interface NoteSubscription
  extends Promise<AsyncIterator<Note>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  note: () => Promise<AsyncIterator<String>>;
  thumbnail: <T = ThumbnailSubscription>() => T;
  folio: <T = FolioSubscription>() => T;
}

export interface NoteConnection {
  pageInfo: PageInfo;
  edges: NoteEdge[];
}

export interface NoteConnectionPromise
  extends Promise<NoteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NoteEdge>>() => T;
  aggregate: <T = AggregateNotePromise>() => T;
}

export interface NoteConnectionSubscription
  extends Promise<AsyncIterator<NoteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NoteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNoteSubscription>() => T;
}

export interface AggregateShare {
  count: Int;
}

export interface AggregateSharePromise
  extends Promise<AggregateShare>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateShareSubscription
  extends Promise<AsyncIterator<AggregateShare>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ThumbnailPreviousValues {
  id: ID_Output;
  name: String;
  path?: String;
}

export interface ThumbnailPreviousValuesPromise
  extends Promise<ThumbnailPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  path: () => Promise<String>;
}

export interface ThumbnailPreviousValuesSubscription
  extends Promise<AsyncIterator<ThumbnailPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  path: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFolio {
  count: Int;
}

export interface AggregateFolioPromise
  extends Promise<AggregateFolio>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFolioSubscription
  extends Promise<AsyncIterator<AggregateFolio>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Share",
    embedded: false
  },
  {
    name: "TagType",
    embedded: false
  },
  {
    name: "Tag",
    embedded: false
  },
  {
    name: "Folio",
    embedded: false
  },
  {
    name: "Asset",
    embedded: false
  },
  {
    name: "Note",
    embedded: false
  },
  {
    name: "Link",
    embedded: false
  },
  {
    name: "Thumbnail",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
